/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TextsLabels as PrismaTextsLabels,
  Labels as PrismaLabels,
  Texts as PrismaTexts,
} from "@prisma/client";

export class TextsLabelsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TextsLabelsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.textsLabels.count(args);
  }

  async textsLabelsItems(
    args: Prisma.TextsLabelsFindManyArgs
  ): Promise<PrismaTextsLabels[]> {
    return this.prisma.textsLabels.findMany(args);
  }
  async textsLabels(
    args: Prisma.TextsLabelsFindUniqueArgs
  ): Promise<PrismaTextsLabels | null> {
    return this.prisma.textsLabels.findUnique(args);
  }
  async createTextsLabels(
    args: Prisma.TextsLabelsCreateArgs
  ): Promise<PrismaTextsLabels> {
    return this.prisma.textsLabels.create(args);
  }
  async updateTextsLabels(
    args: Prisma.TextsLabelsUpdateArgs
  ): Promise<PrismaTextsLabels> {
    return this.prisma.textsLabels.update(args);
  }
  async deleteTextsLabels(
    args: Prisma.TextsLabelsDeleteArgs
  ): Promise<PrismaTextsLabels> {
    return this.prisma.textsLabels.delete(args);
  }

  async getLabel(parentId: string): Promise<PrismaLabels | null> {
    return this.prisma.textsLabels
      .findUnique({
        where: { id: parentId },
      })
      .label();
  }

  async getText(parentId: string): Promise<PrismaTexts | null> {
    return this.prisma.textsLabels
      .findUnique({
        where: { id: parentId },
      })
      .text();
  }
}
