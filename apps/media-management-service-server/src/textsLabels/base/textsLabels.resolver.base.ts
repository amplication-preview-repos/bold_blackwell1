/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TextsLabels } from "./TextsLabels";
import { TextsLabelsCountArgs } from "./TextsLabelsCountArgs";
import { TextsLabelsFindManyArgs } from "./TextsLabelsFindManyArgs";
import { TextsLabelsFindUniqueArgs } from "./TextsLabelsFindUniqueArgs";
import { CreateTextsLabelsArgs } from "./CreateTextsLabelsArgs";
import { UpdateTextsLabelsArgs } from "./UpdateTextsLabelsArgs";
import { DeleteTextsLabelsArgs } from "./DeleteTextsLabelsArgs";
import { Labels } from "../../labels/base/Labels";
import { Texts } from "../../texts/base/Texts";
import { TextsLabelsService } from "../textsLabels.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TextsLabels)
export class TextsLabelsResolverBase {
  constructor(
    protected readonly service: TextsLabelsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TextsLabels",
    action: "read",
    possession: "any",
  })
  async _textsLabelsItemsMeta(
    @graphql.Args() args: TextsLabelsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TextsLabels])
  @nestAccessControl.UseRoles({
    resource: "TextsLabels",
    action: "read",
    possession: "any",
  })
  async textsLabelsItems(
    @graphql.Args() args: TextsLabelsFindManyArgs
  ): Promise<TextsLabels[]> {
    return this.service.textsLabelsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TextsLabels, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TextsLabels",
    action: "read",
    possession: "own",
  })
  async textsLabels(
    @graphql.Args() args: TextsLabelsFindUniqueArgs
  ): Promise<TextsLabels | null> {
    const result = await this.service.textsLabels(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TextsLabels)
  @nestAccessControl.UseRoles({
    resource: "TextsLabels",
    action: "create",
    possession: "any",
  })
  async createTextsLabels(
    @graphql.Args() args: CreateTextsLabelsArgs
  ): Promise<TextsLabels> {
    return await this.service.createTextsLabels({
      ...args,
      data: {
        ...args.data,

        label: args.data.label
          ? {
              connect: args.data.label,
            }
          : undefined,

        text: args.data.text
          ? {
              connect: args.data.text,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TextsLabels)
  @nestAccessControl.UseRoles({
    resource: "TextsLabels",
    action: "update",
    possession: "any",
  })
  async updateTextsLabels(
    @graphql.Args() args: UpdateTextsLabelsArgs
  ): Promise<TextsLabels | null> {
    try {
      return await this.service.updateTextsLabels({
        ...args,
        data: {
          ...args.data,

          label: args.data.label
            ? {
                connect: args.data.label,
              }
            : undefined,

          text: args.data.text
            ? {
                connect: args.data.text,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TextsLabels)
  @nestAccessControl.UseRoles({
    resource: "TextsLabels",
    action: "delete",
    possession: "any",
  })
  async deleteTextsLabels(
    @graphql.Args() args: DeleteTextsLabelsArgs
  ): Promise<TextsLabels | null> {
    try {
      return await this.service.deleteTextsLabels(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Labels, {
    nullable: true,
    name: "label",
  })
  @nestAccessControl.UseRoles({
    resource: "Labels",
    action: "read",
    possession: "any",
  })
  async getLabel(
    @graphql.Parent() parent: TextsLabels
  ): Promise<Labels | null> {
    const result = await this.service.getLabel(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Texts, {
    nullable: true,
    name: "text",
  })
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "read",
    possession: "any",
  })
  async getText(@graphql.Parent() parent: TextsLabels): Promise<Texts | null> {
    const result = await this.service.getText(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
