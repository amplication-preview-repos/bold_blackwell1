/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Books } from "./Books";
import { BooksCountArgs } from "./BooksCountArgs";
import { BooksFindManyArgs } from "./BooksFindManyArgs";
import { BooksFindUniqueArgs } from "./BooksFindUniqueArgs";
import { CreateBooksArgs } from "./CreateBooksArgs";
import { UpdateBooksArgs } from "./UpdateBooksArgs";
import { DeleteBooksArgs } from "./DeleteBooksArgs";
import { AccountsBooksFindManyArgs } from "../../accountsBooks/base/AccountsBooksFindManyArgs";
import { AccountsBooks } from "../../accountsBooks/base/AccountsBooks";
import { ClientsBooksFindManyArgs } from "../../clientsBooks/base/ClientsBooksFindManyArgs";
import { ClientsBooks } from "../../clientsBooks/base/ClientsBooks";
import { TextsFindManyArgs } from "../../texts/base/TextsFindManyArgs";
import { Texts } from "../../texts/base/Texts";
import { BooksService } from "../books.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Books)
export class BooksResolverBase {
  constructor(
    protected readonly service: BooksService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Books",
    action: "read",
    possession: "any",
  })
  async _booksItemsMeta(
    @graphql.Args() args: BooksCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Books])
  @nestAccessControl.UseRoles({
    resource: "Books",
    action: "read",
    possession: "any",
  })
  async booksItems(@graphql.Args() args: BooksFindManyArgs): Promise<Books[]> {
    return this.service.booksItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Books, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Books",
    action: "read",
    possession: "own",
  })
  async books(
    @graphql.Args() args: BooksFindUniqueArgs
  ): Promise<Books | null> {
    const result = await this.service.books(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Books)
  @nestAccessControl.UseRoles({
    resource: "Books",
    action: "create",
    possession: "any",
  })
  async createBooks(@graphql.Args() args: CreateBooksArgs): Promise<Books> {
    return await this.service.createBooks({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Books)
  @nestAccessControl.UseRoles({
    resource: "Books",
    action: "update",
    possession: "any",
  })
  async updateBooks(
    @graphql.Args() args: UpdateBooksArgs
  ): Promise<Books | null> {
    try {
      return await this.service.updateBooks({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Books)
  @nestAccessControl.UseRoles({
    resource: "Books",
    action: "delete",
    possession: "any",
  })
  async deleteBooks(
    @graphql.Args() args: DeleteBooksArgs
  ): Promise<Books | null> {
    try {
      return await this.service.deleteBooks(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AccountsBooks], { name: "accountsBooksItems" })
  @nestAccessControl.UseRoles({
    resource: "AccountsBooks",
    action: "read",
    possession: "any",
  })
  async findAccountsBooksItems(
    @graphql.Parent() parent: Books,
    @graphql.Args() args: AccountsBooksFindManyArgs
  ): Promise<AccountsBooks[]> {
    const results = await this.service.findAccountsBooksItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ClientsBooks], { name: "clientsBooksItems" })
  @nestAccessControl.UseRoles({
    resource: "ClientsBooks",
    action: "read",
    possession: "any",
  })
  async findClientsBooksItems(
    @graphql.Parent() parent: Books,
    @graphql.Args() args: ClientsBooksFindManyArgs
  ): Promise<ClientsBooks[]> {
    const results = await this.service.findClientsBooksItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Texts], { name: "textsItems" })
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "read",
    possession: "any",
  })
  async findTextsItems(
    @graphql.Parent() parent: Books,
    @graphql.Args() args: TextsFindManyArgs
  ): Promise<Texts[]> {
    const results = await this.service.findTextsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
