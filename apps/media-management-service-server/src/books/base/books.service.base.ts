/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Books as PrismaBooks,
  AccountsBooks as PrismaAccountsBooks,
  ClientsBooks as PrismaClientsBooks,
  Texts as PrismaTexts,
} from "@prisma/client";

export class BooksServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BooksCountArgs, "select">): Promise<number> {
    return this.prisma.books.count(args);
  }

  async booksItems(args: Prisma.BooksFindManyArgs): Promise<PrismaBooks[]> {
    return this.prisma.books.findMany(args);
  }
  async books(args: Prisma.BooksFindUniqueArgs): Promise<PrismaBooks | null> {
    return this.prisma.books.findUnique(args);
  }
  async createBooks(args: Prisma.BooksCreateArgs): Promise<PrismaBooks> {
    return this.prisma.books.create(args);
  }
  async updateBooks(args: Prisma.BooksUpdateArgs): Promise<PrismaBooks> {
    return this.prisma.books.update(args);
  }
  async deleteBooks(args: Prisma.BooksDeleteArgs): Promise<PrismaBooks> {
    return this.prisma.books.delete(args);
  }

  async findAccountsBooksItems(
    parentId: string,
    args: Prisma.AccountsBooksFindManyArgs
  ): Promise<PrismaAccountsBooks[]> {
    return this.prisma.books
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .accountsBooksItems(args);
  }

  async findClientsBooksItems(
    parentId: string,
    args: Prisma.ClientsBooksFindManyArgs
  ): Promise<PrismaClientsBooks[]> {
    return this.prisma.books
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .clientsBooksItems(args);
  }

  async findTextsItems(
    parentId: string,
    args: Prisma.TextsFindManyArgs
  ): Promise<PrismaTexts[]> {
    return this.prisma.books
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .textsItems(args);
  }
}
