/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { BooksService } from "../books.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BooksCreateInput } from "./BooksCreateInput";
import { Books } from "./Books";
import { BooksFindManyArgs } from "./BooksFindManyArgs";
import { BooksWhereUniqueInput } from "./BooksWhereUniqueInput";
import { BooksUpdateInput } from "./BooksUpdateInput";
import { AccountsBooksFindManyArgs } from "../../accountsBooks/base/AccountsBooksFindManyArgs";
import { AccountsBooks } from "../../accountsBooks/base/AccountsBooks";
import { AccountsBooksWhereUniqueInput } from "../../accountsBooks/base/AccountsBooksWhereUniqueInput";
import { ClientsBooksFindManyArgs } from "../../clientsBooks/base/ClientsBooksFindManyArgs";
import { ClientsBooks } from "../../clientsBooks/base/ClientsBooks";
import { ClientsBooksWhereUniqueInput } from "../../clientsBooks/base/ClientsBooksWhereUniqueInput";
import { TextsFindManyArgs } from "../../texts/base/TextsFindManyArgs";
import { Texts } from "../../texts/base/Texts";
import { TextsWhereUniqueInput } from "../../texts/base/TextsWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class BooksControllerBase {
  constructor(
    protected readonly service: BooksService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Books })
  @nestAccessControl.UseRoles({
    resource: "Books",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createBooks(@common.Body() data: BooksCreateInput): Promise<Books> {
    return await this.service.createBooks({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Books] })
  @ApiNestedQuery(BooksFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Books",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async booksItems(@common.Req() request: Request): Promise<Books[]> {
    const args = plainToClass(BooksFindManyArgs, request.query);
    return this.service.booksItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Books })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Books",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async books(
    @common.Param() params: BooksWhereUniqueInput
  ): Promise<Books | null> {
    const result = await this.service.books({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Books })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Books",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateBooks(
    @common.Param() params: BooksWhereUniqueInput,
    @common.Body() data: BooksUpdateInput
  ): Promise<Books | null> {
    try {
      return await this.service.updateBooks({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Books })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Books",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteBooks(
    @common.Param() params: BooksWhereUniqueInput
  ): Promise<Books | null> {
    try {
      return await this.service.deleteBooks({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/accountsBooksItems")
  @ApiNestedQuery(AccountsBooksFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AccountsBooks",
    action: "read",
    possession: "any",
  })
  async findAccountsBooksItems(
    @common.Req() request: Request,
    @common.Param() params: BooksWhereUniqueInput
  ): Promise<AccountsBooks[]> {
    const query = plainToClass(AccountsBooksFindManyArgs, request.query);
    const results = await this.service.findAccountsBooksItems(params.id, {
      ...query,
      select: {
        account: {
          select: {
            id: true,
          },
        },

        book: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/accountsBooksItems")
  @nestAccessControl.UseRoles({
    resource: "Books",
    action: "update",
    possession: "any",
  })
  async connectAccountsBooksItems(
    @common.Param() params: BooksWhereUniqueInput,
    @common.Body() body: AccountsBooksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountsBooksItems: {
        connect: body,
      },
    };
    await this.service.updateBooks({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/accountsBooksItems")
  @nestAccessControl.UseRoles({
    resource: "Books",
    action: "update",
    possession: "any",
  })
  async updateAccountsBooksItems(
    @common.Param() params: BooksWhereUniqueInput,
    @common.Body() body: AccountsBooksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountsBooksItems: {
        set: body,
      },
    };
    await this.service.updateBooks({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/accountsBooksItems")
  @nestAccessControl.UseRoles({
    resource: "Books",
    action: "update",
    possession: "any",
  })
  async disconnectAccountsBooksItems(
    @common.Param() params: BooksWhereUniqueInput,
    @common.Body() body: AccountsBooksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountsBooksItems: {
        disconnect: body,
      },
    };
    await this.service.updateBooks({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/clientsBooksItems")
  @ApiNestedQuery(ClientsBooksFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ClientsBooks",
    action: "read",
    possession: "any",
  })
  async findClientsBooksItems(
    @common.Req() request: Request,
    @common.Param() params: BooksWhereUniqueInput
  ): Promise<ClientsBooks[]> {
    const query = plainToClass(ClientsBooksFindManyArgs, request.query);
    const results = await this.service.findClientsBooksItems(params.id, {
      ...query,
      select: {
        book: {
          select: {
            id: true,
          },
        },

        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/clientsBooksItems")
  @nestAccessControl.UseRoles({
    resource: "Books",
    action: "update",
    possession: "any",
  })
  async connectClientsBooksItems(
    @common.Param() params: BooksWhereUniqueInput,
    @common.Body() body: ClientsBooksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      clientsBooksItems: {
        connect: body,
      },
    };
    await this.service.updateBooks({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/clientsBooksItems")
  @nestAccessControl.UseRoles({
    resource: "Books",
    action: "update",
    possession: "any",
  })
  async updateClientsBooksItems(
    @common.Param() params: BooksWhereUniqueInput,
    @common.Body() body: ClientsBooksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      clientsBooksItems: {
        set: body,
      },
    };
    await this.service.updateBooks({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/clientsBooksItems")
  @nestAccessControl.UseRoles({
    resource: "Books",
    action: "update",
    possession: "any",
  })
  async disconnectClientsBooksItems(
    @common.Param() params: BooksWhereUniqueInput,
    @common.Body() body: ClientsBooksWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      clientsBooksItems: {
        disconnect: body,
      },
    };
    await this.service.updateBooks({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/textsItems")
  @ApiNestedQuery(TextsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "read",
    possession: "any",
  })
  async findTextsItems(
    @common.Req() request: Request,
    @common.Param() params: BooksWhereUniqueInput
  ): Promise<Texts[]> {
    const query = plainToClass(TextsFindManyArgs, request.query);
    const results = await this.service.findTextsItems(params.id, {
      ...query,
      select: {
        book: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/textsItems")
  @nestAccessControl.UseRoles({
    resource: "Books",
    action: "update",
    possession: "any",
  })
  async connectTextsItems(
    @common.Param() params: BooksWhereUniqueInput,
    @common.Body() body: TextsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      textsItems: {
        connect: body,
      },
    };
    await this.service.updateBooks({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/textsItems")
  @nestAccessControl.UseRoles({
    resource: "Books",
    action: "update",
    possession: "any",
  })
  async updateTextsItems(
    @common.Param() params: BooksWhereUniqueInput,
    @common.Body() body: TextsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      textsItems: {
        set: body,
      },
    };
    await this.service.updateBooks({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/textsItems")
  @nestAccessControl.UseRoles({
    resource: "Books",
    action: "update",
    possession: "any",
  })
  async disconnectTextsItems(
    @common.Param() params: BooksWhereUniqueInput,
    @common.Body() body: TextsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      textsItems: {
        disconnect: body,
      },
    };
    await this.service.updateBooks({
      where: params,
      data,
      select: { id: true },
    });
  }
}
