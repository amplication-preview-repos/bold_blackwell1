/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SoundsService } from "../sounds.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SoundsCreateInput } from "./SoundsCreateInput";
import { Sounds } from "./Sounds";
import { SoundsFindManyArgs } from "./SoundsFindManyArgs";
import { SoundsWhereUniqueInput } from "./SoundsWhereUniqueInput";
import { SoundsUpdateInput } from "./SoundsUpdateInput";
import { SoundsLabelsFindManyArgs } from "../../soundsLabels/base/SoundsLabelsFindManyArgs";
import { SoundsLabels } from "../../soundsLabels/base/SoundsLabels";
import { SoundsLabelsWhereUniqueInput } from "../../soundsLabels/base/SoundsLabelsWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SoundsControllerBase {
  constructor(
    protected readonly service: SoundsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Sounds })
  @nestAccessControl.UseRoles({
    resource: "Sounds",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSounds(@common.Body() data: SoundsCreateInput): Promise<Sounds> {
    return await this.service.createSounds({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Sounds] })
  @ApiNestedQuery(SoundsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Sounds",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async soundsItems(@common.Req() request: Request): Promise<Sounds[]> {
    const args = plainToClass(SoundsFindManyArgs, request.query);
    return this.service.soundsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Sounds })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Sounds",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async sounds(
    @common.Param() params: SoundsWhereUniqueInput
  ): Promise<Sounds | null> {
    const result = await this.service.sounds({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Sounds })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Sounds",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSounds(
    @common.Param() params: SoundsWhereUniqueInput,
    @common.Body() data: SoundsUpdateInput
  ): Promise<Sounds | null> {
    try {
      return await this.service.updateSounds({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Sounds })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Sounds",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSounds(
    @common.Param() params: SoundsWhereUniqueInput
  ): Promise<Sounds | null> {
    try {
      return await this.service.deleteSounds({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/soundsLabelsItems")
  @ApiNestedQuery(SoundsLabelsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SoundsLabels",
    action: "read",
    possession: "any",
  })
  async findSoundsLabelsItems(
    @common.Req() request: Request,
    @common.Param() params: SoundsWhereUniqueInput
  ): Promise<SoundsLabels[]> {
    const query = plainToClass(SoundsLabelsFindManyArgs, request.query);
    const results = await this.service.findSoundsLabelsItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        label: {
          select: {
            id: true,
          },
        },

        sound: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/soundsLabelsItems")
  @nestAccessControl.UseRoles({
    resource: "Sounds",
    action: "update",
    possession: "any",
  })
  async connectSoundsLabelsItems(
    @common.Param() params: SoundsWhereUniqueInput,
    @common.Body() body: SoundsLabelsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      soundsLabelsItems: {
        connect: body,
      },
    };
    await this.service.updateSounds({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/soundsLabelsItems")
  @nestAccessControl.UseRoles({
    resource: "Sounds",
    action: "update",
    possession: "any",
  })
  async updateSoundsLabelsItems(
    @common.Param() params: SoundsWhereUniqueInput,
    @common.Body() body: SoundsLabelsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      soundsLabelsItems: {
        set: body,
      },
    };
    await this.service.updateSounds({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/soundsLabelsItems")
  @nestAccessControl.UseRoles({
    resource: "Sounds",
    action: "update",
    possession: "any",
  })
  async disconnectSoundsLabelsItems(
    @common.Param() params: SoundsWhereUniqueInput,
    @common.Body() body: SoundsLabelsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      soundsLabelsItems: {
        disconnect: body,
      },
    };
    await this.service.updateSounds({
      where: params,
      data,
      select: { id: true },
    });
  }
}
