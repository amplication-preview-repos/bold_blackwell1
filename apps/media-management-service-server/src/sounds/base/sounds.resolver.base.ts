/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Sounds } from "./Sounds";
import { SoundsCountArgs } from "./SoundsCountArgs";
import { SoundsFindManyArgs } from "./SoundsFindManyArgs";
import { SoundsFindUniqueArgs } from "./SoundsFindUniqueArgs";
import { CreateSoundsArgs } from "./CreateSoundsArgs";
import { UpdateSoundsArgs } from "./UpdateSoundsArgs";
import { DeleteSoundsArgs } from "./DeleteSoundsArgs";
import { SoundsLabelsFindManyArgs } from "../../soundsLabels/base/SoundsLabelsFindManyArgs";
import { SoundsLabels } from "../../soundsLabels/base/SoundsLabels";
import { SoundsService } from "../sounds.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Sounds)
export class SoundsResolverBase {
  constructor(
    protected readonly service: SoundsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Sounds",
    action: "read",
    possession: "any",
  })
  async _soundsItemsMeta(
    @graphql.Args() args: SoundsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Sounds])
  @nestAccessControl.UseRoles({
    resource: "Sounds",
    action: "read",
    possession: "any",
  })
  async soundsItems(
    @graphql.Args() args: SoundsFindManyArgs
  ): Promise<Sounds[]> {
    return this.service.soundsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Sounds, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Sounds",
    action: "read",
    possession: "own",
  })
  async sounds(
    @graphql.Args() args: SoundsFindUniqueArgs
  ): Promise<Sounds | null> {
    const result = await this.service.sounds(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Sounds)
  @nestAccessControl.UseRoles({
    resource: "Sounds",
    action: "create",
    possession: "any",
  })
  async createSounds(@graphql.Args() args: CreateSoundsArgs): Promise<Sounds> {
    return await this.service.createSounds({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Sounds)
  @nestAccessControl.UseRoles({
    resource: "Sounds",
    action: "update",
    possession: "any",
  })
  async updateSounds(
    @graphql.Args() args: UpdateSoundsArgs
  ): Promise<Sounds | null> {
    try {
      return await this.service.updateSounds({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Sounds)
  @nestAccessControl.UseRoles({
    resource: "Sounds",
    action: "delete",
    possession: "any",
  })
  async deleteSounds(
    @graphql.Args() args: DeleteSoundsArgs
  ): Promise<Sounds | null> {
    try {
      return await this.service.deleteSounds(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SoundsLabels], { name: "soundsLabelsItems" })
  @nestAccessControl.UseRoles({
    resource: "SoundsLabels",
    action: "read",
    possession: "any",
  })
  async findSoundsLabelsItems(
    @graphql.Parent() parent: Sounds,
    @graphql.Args() args: SoundsLabelsFindManyArgs
  ): Promise<SoundsLabels[]> {
    const results = await this.service.findSoundsLabelsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
