/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Sounds as PrismaSounds,
  SoundsLabels as PrismaSoundsLabels,
} from "@prisma/client";

export class SoundsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SoundsCountArgs, "select">): Promise<number> {
    return this.prisma.sounds.count(args);
  }

  async soundsItems(args: Prisma.SoundsFindManyArgs): Promise<PrismaSounds[]> {
    return this.prisma.sounds.findMany(args);
  }
  async sounds(
    args: Prisma.SoundsFindUniqueArgs
  ): Promise<PrismaSounds | null> {
    return this.prisma.sounds.findUnique(args);
  }
  async createSounds(args: Prisma.SoundsCreateArgs): Promise<PrismaSounds> {
    return this.prisma.sounds.create(args);
  }
  async updateSounds(args: Prisma.SoundsUpdateArgs): Promise<PrismaSounds> {
    return this.prisma.sounds.update(args);
  }
  async deleteSounds(args: Prisma.SoundsDeleteArgs): Promise<PrismaSounds> {
    return this.prisma.sounds.delete(args);
  }

  async findSoundsLabelsItems(
    parentId: string,
    args: Prisma.SoundsLabelsFindManyArgs
  ): Promise<PrismaSoundsLabels[]> {
    return this.prisma.sounds
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .soundsLabelsItems(args);
  }
}
