/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Crew as PrismaCrew,
  Phones as PrismaPhones,
} from "@prisma/client";

export class CrewServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CrewCountArgs, "select">): Promise<number> {
    return this.prisma.crew.count(args);
  }

  async crews(args: Prisma.CrewFindManyArgs): Promise<PrismaCrew[]> {
    return this.prisma.crew.findMany(args);
  }
  async crew(args: Prisma.CrewFindUniqueArgs): Promise<PrismaCrew | null> {
    return this.prisma.crew.findUnique(args);
  }
  async createCrew(args: Prisma.CrewCreateArgs): Promise<PrismaCrew> {
    return this.prisma.crew.create(args);
  }
  async updateCrew(args: Prisma.CrewUpdateArgs): Promise<PrismaCrew> {
    return this.prisma.crew.update(args);
  }
  async deleteCrew(args: Prisma.CrewDeleteArgs): Promise<PrismaCrew> {
    return this.prisma.crew.delete(args);
  }

  async findPhonesItems(
    parentId: string,
    args: Prisma.PhonesFindManyArgs
  ): Promise<PrismaPhones[]> {
    return this.prisma.crew
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .phonesItems(args);
  }
}
