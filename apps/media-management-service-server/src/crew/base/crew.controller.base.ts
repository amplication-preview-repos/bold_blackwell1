/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CrewService } from "../crew.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CrewCreateInput } from "./CrewCreateInput";
import { Crew } from "./Crew";
import { CrewFindManyArgs } from "./CrewFindManyArgs";
import { CrewWhereUniqueInput } from "./CrewWhereUniqueInput";
import { CrewUpdateInput } from "./CrewUpdateInput";
import { PhonesFindManyArgs } from "../../phones/base/PhonesFindManyArgs";
import { Phones } from "../../phones/base/Phones";
import { PhonesWhereUniqueInput } from "../../phones/base/PhonesWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CrewControllerBase {
  constructor(
    protected readonly service: CrewService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Crew })
  @nestAccessControl.UseRoles({
    resource: "Crew",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCrew(@common.Body() data: CrewCreateInput): Promise<Crew> {
    return await this.service.createCrew({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Crew] })
  @ApiNestedQuery(CrewFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Crew",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async crews(@common.Req() request: Request): Promise<Crew[]> {
    const args = plainToClass(CrewFindManyArgs, request.query);
    return this.service.crews({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Crew })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Crew",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async crew(
    @common.Param() params: CrewWhereUniqueInput
  ): Promise<Crew | null> {
    const result = await this.service.crew({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Crew })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Crew",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCrew(
    @common.Param() params: CrewWhereUniqueInput,
    @common.Body() data: CrewUpdateInput
  ): Promise<Crew | null> {
    try {
      return await this.service.updateCrew({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Crew })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Crew",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCrew(
    @common.Param() params: CrewWhereUniqueInput
  ): Promise<Crew | null> {
    try {
      return await this.service.deleteCrew({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/phonesItems")
  @ApiNestedQuery(PhonesFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Phones",
    action: "read",
    possession: "any",
  })
  async findPhonesItems(
    @common.Req() request: Request,
    @common.Param() params: CrewWhereUniqueInput
  ): Promise<Phones[]> {
    const query = plainToClass(PhonesFindManyArgs, request.query);
    const results = await this.service.findPhonesItems(params.id, {
      ...query,
      select: {
        createdAt: true,

        crew: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/phonesItems")
  @nestAccessControl.UseRoles({
    resource: "Crew",
    action: "update",
    possession: "any",
  })
  async connectPhonesItems(
    @common.Param() params: CrewWhereUniqueInput,
    @common.Body() body: PhonesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      phonesItems: {
        connect: body,
      },
    };
    await this.service.updateCrew({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/phonesItems")
  @nestAccessControl.UseRoles({
    resource: "Crew",
    action: "update",
    possession: "any",
  })
  async updatePhonesItems(
    @common.Param() params: CrewWhereUniqueInput,
    @common.Body() body: PhonesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      phonesItems: {
        set: body,
      },
    };
    await this.service.updateCrew({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/phonesItems")
  @nestAccessControl.UseRoles({
    resource: "Crew",
    action: "update",
    possession: "any",
  })
  async disconnectPhonesItems(
    @common.Param() params: CrewWhereUniqueInput,
    @common.Body() body: PhonesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      phonesItems: {
        disconnect: body,
      },
    };
    await this.service.updateCrew({
      where: params,
      data,
      select: { id: true },
    });
  }
}
