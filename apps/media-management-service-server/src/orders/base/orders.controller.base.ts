/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { OrdersService } from "../orders.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { OrdersCreateInput } from "./OrdersCreateInput";
import { Orders } from "./Orders";
import { OrdersFindManyArgs } from "./OrdersFindManyArgs";
import { OrdersWhereUniqueInput } from "./OrdersWhereUniqueInput";
import { OrdersUpdateInput } from "./OrdersUpdateInput";
import { VideoMetricsFindManyArgs } from "../../videoMetrics/base/VideoMetricsFindManyArgs";
import { VideoMetrics } from "../../videoMetrics/base/VideoMetrics";
import { VideoMetricsWhereUniqueInput } from "../../videoMetrics/base/VideoMetricsWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class OrdersControllerBase {
  constructor(
    protected readonly service: OrdersService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Orders })
  @nestAccessControl.UseRoles({
    resource: "Orders",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createOrders(@common.Body() data: OrdersCreateInput): Promise<Orders> {
    return await this.service.createOrders({
      data: {
        ...data,

        account: data.account
          ? {
              connect: data.account,
            }
          : undefined,

        phone: data.phone
          ? {
              connect: data.phone,
            }
          : undefined,

        text: data.text
          ? {
              connect: data.text,
            }
          : undefined,
      },
      select: {
        account: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        phone: {
          select: {
            id: true,
          },
        },

        text: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Orders] })
  @ApiNestedQuery(OrdersFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Orders",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async ordersItems(@common.Req() request: Request): Promise<Orders[]> {
    const args = plainToClass(OrdersFindManyArgs, request.query);
    return this.service.ordersItems({
      ...args,
      select: {
        account: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        phone: {
          select: {
            id: true,
          },
        },

        text: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Orders })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Orders",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async orders(
    @common.Param() params: OrdersWhereUniqueInput
  ): Promise<Orders | null> {
    const result = await this.service.orders({
      where: params,
      select: {
        account: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        phone: {
          select: {
            id: true,
          },
        },

        text: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Orders })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Orders",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateOrders(
    @common.Param() params: OrdersWhereUniqueInput,
    @common.Body() data: OrdersUpdateInput
  ): Promise<Orders | null> {
    try {
      return await this.service.updateOrders({
        where: params,
        data: {
          ...data,

          account: data.account
            ? {
                connect: data.account,
              }
            : undefined,

          phone: data.phone
            ? {
                connect: data.phone,
              }
            : undefined,

          text: data.text
            ? {
                connect: data.text,
              }
            : undefined,
        },
        select: {
          account: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,

          phone: {
            select: {
              id: true,
            },
          },

          text: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Orders })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Orders",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteOrders(
    @common.Param() params: OrdersWhereUniqueInput
  ): Promise<Orders | null> {
    try {
      return await this.service.deleteOrders({
        where: params,
        select: {
          account: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,

          phone: {
            select: {
              id: true,
            },
          },

          text: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/videoMetricsItems")
  @ApiNestedQuery(VideoMetricsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "VideoMetrics",
    action: "read",
    possession: "any",
  })
  async findVideoMetricsItems(
    @common.Req() request: Request,
    @common.Param() params: OrdersWhereUniqueInput
  ): Promise<VideoMetrics[]> {
    const query = plainToClass(VideoMetricsFindManyArgs, request.query);
    const results = await this.service.findVideoMetricsItems(params.id, {
      ...query,
      select: {
        comments: true,
        createdAt: true,
        id: true,
        likes: true,

        order: {
          select: {
            id: true,
          },
        },

        saves: true,
        shares: true,
        updatedAt: true,
        views: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/videoMetricsItems")
  @nestAccessControl.UseRoles({
    resource: "Orders",
    action: "update",
    possession: "any",
  })
  async connectVideoMetricsItems(
    @common.Param() params: OrdersWhereUniqueInput,
    @common.Body() body: VideoMetricsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      videoMetricsItems: {
        connect: body,
      },
    };
    await this.service.updateOrders({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/videoMetricsItems")
  @nestAccessControl.UseRoles({
    resource: "Orders",
    action: "update",
    possession: "any",
  })
  async updateVideoMetricsItems(
    @common.Param() params: OrdersWhereUniqueInput,
    @common.Body() body: VideoMetricsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      videoMetricsItems: {
        set: body,
      },
    };
    await this.service.updateOrders({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/videoMetricsItems")
  @nestAccessControl.UseRoles({
    resource: "Orders",
    action: "update",
    possession: "any",
  })
  async disconnectVideoMetricsItems(
    @common.Param() params: OrdersWhereUniqueInput,
    @common.Body() body: VideoMetricsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      videoMetricsItems: {
        disconnect: body,
      },
    };
    await this.service.updateOrders({
      where: params,
      data,
      select: { id: true },
    });
  }
}
