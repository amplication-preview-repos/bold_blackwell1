/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { HashtagsService } from "../hashtags.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { HashtagsCreateInput } from "./HashtagsCreateInput";
import { Hashtags } from "./Hashtags";
import { HashtagsFindManyArgs } from "./HashtagsFindManyArgs";
import { HashtagsWhereUniqueInput } from "./HashtagsWhereUniqueInput";
import { HashtagsUpdateInput } from "./HashtagsUpdateInput";
import { TextsHashtagsFindManyArgs } from "../../textsHashtags/base/TextsHashtagsFindManyArgs";
import { TextsHashtags } from "../../textsHashtags/base/TextsHashtags";
import { TextsHashtagsWhereUniqueInput } from "../../textsHashtags/base/TextsHashtagsWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class HashtagsControllerBase {
  constructor(
    protected readonly service: HashtagsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Hashtags })
  @nestAccessControl.UseRoles({
    resource: "Hashtags",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createHashtags(
    @common.Body() data: HashtagsCreateInput
  ): Promise<Hashtags> {
    return await this.service.createHashtags({
      data: data,
      select: {
        createdAt: true,
        hashtag: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Hashtags] })
  @ApiNestedQuery(HashtagsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Hashtags",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async hashtagsItems(@common.Req() request: Request): Promise<Hashtags[]> {
    const args = plainToClass(HashtagsFindManyArgs, request.query);
    return this.service.hashtagsItems({
      ...args,
      select: {
        createdAt: true,
        hashtag: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Hashtags })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Hashtags",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async hashtags(
    @common.Param() params: HashtagsWhereUniqueInput
  ): Promise<Hashtags | null> {
    const result = await this.service.hashtags({
      where: params,
      select: {
        createdAt: true,
        hashtag: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Hashtags })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Hashtags",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateHashtags(
    @common.Param() params: HashtagsWhereUniqueInput,
    @common.Body() data: HashtagsUpdateInput
  ): Promise<Hashtags | null> {
    try {
      return await this.service.updateHashtags({
        where: params,
        data: data,
        select: {
          createdAt: true,
          hashtag: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Hashtags })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Hashtags",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteHashtags(
    @common.Param() params: HashtagsWhereUniqueInput
  ): Promise<Hashtags | null> {
    try {
      return await this.service.deleteHashtags({
        where: params,
        select: {
          createdAt: true,
          hashtag: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/textsHashtagsItems")
  @ApiNestedQuery(TextsHashtagsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TextsHashtags",
    action: "read",
    possession: "any",
  })
  async findTextsHashtagsItems(
    @common.Req() request: Request,
    @common.Param() params: HashtagsWhereUniqueInput
  ): Promise<TextsHashtags[]> {
    const query = plainToClass(TextsHashtagsFindManyArgs, request.query);
    const results = await this.service.findTextsHashtagsItems(params.id, {
      ...query,
      select: {
        createdAt: true,

        hashtag: {
          select: {
            id: true,
          },
        },

        id: true,

        text: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/textsHashtagsItems")
  @nestAccessControl.UseRoles({
    resource: "Hashtags",
    action: "update",
    possession: "any",
  })
  async connectTextsHashtagsItems(
    @common.Param() params: HashtagsWhereUniqueInput,
    @common.Body() body: TextsHashtagsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      textsHashtagsItems: {
        connect: body,
      },
    };
    await this.service.updateHashtags({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/textsHashtagsItems")
  @nestAccessControl.UseRoles({
    resource: "Hashtags",
    action: "update",
    possession: "any",
  })
  async updateTextsHashtagsItems(
    @common.Param() params: HashtagsWhereUniqueInput,
    @common.Body() body: TextsHashtagsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      textsHashtagsItems: {
        set: body,
      },
    };
    await this.service.updateHashtags({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/textsHashtagsItems")
  @nestAccessControl.UseRoles({
    resource: "Hashtags",
    action: "update",
    possession: "any",
  })
  async disconnectTextsHashtagsItems(
    @common.Param() params: HashtagsWhereUniqueInput,
    @common.Body() body: TextsHashtagsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      textsHashtagsItems: {
        disconnect: body,
      },
    };
    await this.service.updateHashtags({
      where: params,
      data,
      select: { id: true },
    });
  }
}
