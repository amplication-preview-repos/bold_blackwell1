/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Hashtags } from "./Hashtags";
import { HashtagsCountArgs } from "./HashtagsCountArgs";
import { HashtagsFindManyArgs } from "./HashtagsFindManyArgs";
import { HashtagsFindUniqueArgs } from "./HashtagsFindUniqueArgs";
import { CreateHashtagsArgs } from "./CreateHashtagsArgs";
import { UpdateHashtagsArgs } from "./UpdateHashtagsArgs";
import { DeleteHashtagsArgs } from "./DeleteHashtagsArgs";
import { TextsHashtagsFindManyArgs } from "../../textsHashtags/base/TextsHashtagsFindManyArgs";
import { TextsHashtags } from "../../textsHashtags/base/TextsHashtags";
import { HashtagsService } from "../hashtags.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Hashtags)
export class HashtagsResolverBase {
  constructor(
    protected readonly service: HashtagsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Hashtags",
    action: "read",
    possession: "any",
  })
  async _hashtagsItemsMeta(
    @graphql.Args() args: HashtagsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Hashtags])
  @nestAccessControl.UseRoles({
    resource: "Hashtags",
    action: "read",
    possession: "any",
  })
  async hashtagsItems(
    @graphql.Args() args: HashtagsFindManyArgs
  ): Promise<Hashtags[]> {
    return this.service.hashtagsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Hashtags, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Hashtags",
    action: "read",
    possession: "own",
  })
  async hashtags(
    @graphql.Args() args: HashtagsFindUniqueArgs
  ): Promise<Hashtags | null> {
    const result = await this.service.hashtags(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Hashtags)
  @nestAccessControl.UseRoles({
    resource: "Hashtags",
    action: "create",
    possession: "any",
  })
  async createHashtags(
    @graphql.Args() args: CreateHashtagsArgs
  ): Promise<Hashtags> {
    return await this.service.createHashtags({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Hashtags)
  @nestAccessControl.UseRoles({
    resource: "Hashtags",
    action: "update",
    possession: "any",
  })
  async updateHashtags(
    @graphql.Args() args: UpdateHashtagsArgs
  ): Promise<Hashtags | null> {
    try {
      return await this.service.updateHashtags({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Hashtags)
  @nestAccessControl.UseRoles({
    resource: "Hashtags",
    action: "delete",
    possession: "any",
  })
  async deleteHashtags(
    @graphql.Args() args: DeleteHashtagsArgs
  ): Promise<Hashtags | null> {
    try {
      return await this.service.deleteHashtags(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [TextsHashtags], { name: "textsHashtagsItems" })
  @nestAccessControl.UseRoles({
    resource: "TextsHashtags",
    action: "read",
    possession: "any",
  })
  async findTextsHashtagsItems(
    @graphql.Parent() parent: Hashtags,
    @graphql.Args() args: TextsHashtagsFindManyArgs
  ): Promise<TextsHashtags[]> {
    const results = await this.service.findTextsHashtagsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
