/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Hashtags as PrismaHashtags,
  TextsHashtags as PrismaTextsHashtags,
} from "@prisma/client";

export class HashtagsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.HashtagsCountArgs, "select">): Promise<number> {
    return this.prisma.hashtags.count(args);
  }

  async hashtagsItems(
    args: Prisma.HashtagsFindManyArgs
  ): Promise<PrismaHashtags[]> {
    return this.prisma.hashtags.findMany(args);
  }
  async hashtags(
    args: Prisma.HashtagsFindUniqueArgs
  ): Promise<PrismaHashtags | null> {
    return this.prisma.hashtags.findUnique(args);
  }
  async createHashtags(
    args: Prisma.HashtagsCreateArgs
  ): Promise<PrismaHashtags> {
    return this.prisma.hashtags.create(args);
  }
  async updateHashtags(
    args: Prisma.HashtagsUpdateArgs
  ): Promise<PrismaHashtags> {
    return this.prisma.hashtags.update(args);
  }
  async deleteHashtags(
    args: Prisma.HashtagsDeleteArgs
  ): Promise<PrismaHashtags> {
    return this.prisma.hashtags.delete(args);
  }

  async findTextsHashtagsItems(
    parentId: string,
    args: Prisma.TextsHashtagsFindManyArgs
  ): Promise<PrismaTextsHashtags[]> {
    return this.prisma.hashtags
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .textsHashtagsItems(args);
  }
}
