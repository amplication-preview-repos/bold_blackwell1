/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Phones } from "./Phones";
import { PhonesCountArgs } from "./PhonesCountArgs";
import { PhonesFindManyArgs } from "./PhonesFindManyArgs";
import { PhonesFindUniqueArgs } from "./PhonesFindUniqueArgs";
import { CreatePhonesArgs } from "./CreatePhonesArgs";
import { UpdatePhonesArgs } from "./UpdatePhonesArgs";
import { DeletePhonesArgs } from "./DeletePhonesArgs";
import { AccountsFindManyArgs } from "../../accounts/base/AccountsFindManyArgs";
import { Accounts } from "../../accounts/base/Accounts";
import { OrdersFindManyArgs } from "../../orders/base/OrdersFindManyArgs";
import { Orders } from "../../orders/base/Orders";
import { Crew } from "../../crew/base/Crew";
import { PhonesService } from "../phones.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Phones)
export class PhonesResolverBase {
  constructor(
    protected readonly service: PhonesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Phones",
    action: "read",
    possession: "any",
  })
  async _phonesItemsMeta(
    @graphql.Args() args: PhonesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Phones])
  @nestAccessControl.UseRoles({
    resource: "Phones",
    action: "read",
    possession: "any",
  })
  async phonesItems(
    @graphql.Args() args: PhonesFindManyArgs
  ): Promise<Phones[]> {
    return this.service.phonesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Phones, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Phones",
    action: "read",
    possession: "own",
  })
  async phones(
    @graphql.Args() args: PhonesFindUniqueArgs
  ): Promise<Phones | null> {
    const result = await this.service.phones(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Phones)
  @nestAccessControl.UseRoles({
    resource: "Phones",
    action: "create",
    possession: "any",
  })
  async createPhones(@graphql.Args() args: CreatePhonesArgs): Promise<Phones> {
    return await this.service.createPhones({
      ...args,
      data: {
        ...args.data,

        crew: args.data.crew
          ? {
              connect: args.data.crew,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Phones)
  @nestAccessControl.UseRoles({
    resource: "Phones",
    action: "update",
    possession: "any",
  })
  async updatePhones(
    @graphql.Args() args: UpdatePhonesArgs
  ): Promise<Phones | null> {
    try {
      return await this.service.updatePhones({
        ...args,
        data: {
          ...args.data,

          crew: args.data.crew
            ? {
                connect: args.data.crew,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Phones)
  @nestAccessControl.UseRoles({
    resource: "Phones",
    action: "delete",
    possession: "any",
  })
  async deletePhones(
    @graphql.Args() args: DeletePhonesArgs
  ): Promise<Phones | null> {
    try {
      return await this.service.deletePhones(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Accounts], { name: "accountsItems" })
  @nestAccessControl.UseRoles({
    resource: "Accounts",
    action: "read",
    possession: "any",
  })
  async findAccountsItems(
    @graphql.Parent() parent: Phones,
    @graphql.Args() args: AccountsFindManyArgs
  ): Promise<Accounts[]> {
    const results = await this.service.findAccountsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Orders], { name: "ordersItems" })
  @nestAccessControl.UseRoles({
    resource: "Orders",
    action: "read",
    possession: "any",
  })
  async findOrdersItems(
    @graphql.Parent() parent: Phones,
    @graphql.Args() args: OrdersFindManyArgs
  ): Promise<Orders[]> {
    const results = await this.service.findOrdersItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Crew, {
    nullable: true,
    name: "crew",
  })
  @nestAccessControl.UseRoles({
    resource: "Crew",
    action: "read",
    possession: "any",
  })
  async getCrew(@graphql.Parent() parent: Phones): Promise<Crew | null> {
    const result = await this.service.getCrew(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
