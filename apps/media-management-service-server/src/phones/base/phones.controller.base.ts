/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PhonesService } from "../phones.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PhonesCreateInput } from "./PhonesCreateInput";
import { Phones } from "./Phones";
import { PhonesFindManyArgs } from "./PhonesFindManyArgs";
import { PhonesWhereUniqueInput } from "./PhonesWhereUniqueInput";
import { PhonesUpdateInput } from "./PhonesUpdateInput";
import { AccountsFindManyArgs } from "../../accounts/base/AccountsFindManyArgs";
import { Accounts } from "../../accounts/base/Accounts";
import { AccountsWhereUniqueInput } from "../../accounts/base/AccountsWhereUniqueInput";
import { OrdersFindManyArgs } from "../../orders/base/OrdersFindManyArgs";
import { Orders } from "../../orders/base/Orders";
import { OrdersWhereUniqueInput } from "../../orders/base/OrdersWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PhonesControllerBase {
  constructor(
    protected readonly service: PhonesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Phones })
  @nestAccessControl.UseRoles({
    resource: "Phones",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPhones(@common.Body() data: PhonesCreateInput): Promise<Phones> {
    return await this.service.createPhones({
      data: {
        ...data,

        crew: data.crew
          ? {
              connect: data.crew,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        crew: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Phones] })
  @ApiNestedQuery(PhonesFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Phones",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async phonesItems(@common.Req() request: Request): Promise<Phones[]> {
    const args = plainToClass(PhonesFindManyArgs, request.query);
    return this.service.phonesItems({
      ...args,
      select: {
        createdAt: true,

        crew: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Phones })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Phones",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async phones(
    @common.Param() params: PhonesWhereUniqueInput
  ): Promise<Phones | null> {
    const result = await this.service.phones({
      where: params,
      select: {
        createdAt: true,

        crew: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Phones })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Phones",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePhones(
    @common.Param() params: PhonesWhereUniqueInput,
    @common.Body() data: PhonesUpdateInput
  ): Promise<Phones | null> {
    try {
      return await this.service.updatePhones({
        where: params,
        data: {
          ...data,

          crew: data.crew
            ? {
                connect: data.crew,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          crew: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Phones })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Phones",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePhones(
    @common.Param() params: PhonesWhereUniqueInput
  ): Promise<Phones | null> {
    try {
      return await this.service.deletePhones({
        where: params,
        select: {
          createdAt: true,

          crew: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/accountsItems")
  @ApiNestedQuery(AccountsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Accounts",
    action: "read",
    possession: "any",
  })
  async findAccountsItems(
    @common.Req() request: Request,
    @common.Param() params: PhonesWhereUniqueInput
  ): Promise<Accounts[]> {
    const query = plainToClass(AccountsFindManyArgs, request.query);
    const results = await this.service.findAccountsItems(params.id, {
      ...query,
      select: {
        accountsName: true,
        createdAt: true,
        followers: true,
        id: true,

        phone: {
          select: {
            id: true,
          },
        },

        profilePicture: true,
        totalLikes: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/accountsItems")
  @nestAccessControl.UseRoles({
    resource: "Phones",
    action: "update",
    possession: "any",
  })
  async connectAccountsItems(
    @common.Param() params: PhonesWhereUniqueInput,
    @common.Body() body: AccountsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountsItems: {
        connect: body,
      },
    };
    await this.service.updatePhones({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/accountsItems")
  @nestAccessControl.UseRoles({
    resource: "Phones",
    action: "update",
    possession: "any",
  })
  async updateAccountsItems(
    @common.Param() params: PhonesWhereUniqueInput,
    @common.Body() body: AccountsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountsItems: {
        set: body,
      },
    };
    await this.service.updatePhones({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/accountsItems")
  @nestAccessControl.UseRoles({
    resource: "Phones",
    action: "update",
    possession: "any",
  })
  async disconnectAccountsItems(
    @common.Param() params: PhonesWhereUniqueInput,
    @common.Body() body: AccountsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountsItems: {
        disconnect: body,
      },
    };
    await this.service.updatePhones({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/ordersItems")
  @ApiNestedQuery(OrdersFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Orders",
    action: "read",
    possession: "any",
  })
  async findOrdersItems(
    @common.Req() request: Request,
    @common.Param() params: PhonesWhereUniqueInput
  ): Promise<Orders[]> {
    const query = plainToClass(OrdersFindManyArgs, request.query);
    const results = await this.service.findOrdersItems(params.id, {
      ...query,
      select: {
        account: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        phone: {
          select: {
            id: true,
          },
        },

        text: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ordersItems")
  @nestAccessControl.UseRoles({
    resource: "Phones",
    action: "update",
    possession: "any",
  })
  async connectOrdersItems(
    @common.Param() params: PhonesWhereUniqueInput,
    @common.Body() body: OrdersWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersItems: {
        connect: body,
      },
    };
    await this.service.updatePhones({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ordersItems")
  @nestAccessControl.UseRoles({
    resource: "Phones",
    action: "update",
    possession: "any",
  })
  async updateOrdersItems(
    @common.Param() params: PhonesWhereUniqueInput,
    @common.Body() body: OrdersWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersItems: {
        set: body,
      },
    };
    await this.service.updatePhones({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ordersItems")
  @nestAccessControl.UseRoles({
    resource: "Phones",
    action: "update",
    possession: "any",
  })
  async disconnectOrdersItems(
    @common.Param() params: PhonesWhereUniqueInput,
    @common.Body() body: OrdersWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersItems: {
        disconnect: body,
      },
    };
    await this.service.updatePhones({
      where: params,
      data,
      select: { id: true },
    });
  }
}
