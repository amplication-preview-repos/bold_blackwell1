/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Phones as PrismaPhones,
  Accounts as PrismaAccounts,
  Orders as PrismaOrders,
  Crew as PrismaCrew,
} from "@prisma/client";

export class PhonesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PhonesCountArgs, "select">): Promise<number> {
    return this.prisma.phones.count(args);
  }

  async phonesItems(args: Prisma.PhonesFindManyArgs): Promise<PrismaPhones[]> {
    return this.prisma.phones.findMany(args);
  }
  async phones(
    args: Prisma.PhonesFindUniqueArgs
  ): Promise<PrismaPhones | null> {
    return this.prisma.phones.findUnique(args);
  }
  async createPhones(args: Prisma.PhonesCreateArgs): Promise<PrismaPhones> {
    return this.prisma.phones.create(args);
  }
  async updatePhones(args: Prisma.PhonesUpdateArgs): Promise<PrismaPhones> {
    return this.prisma.phones.update(args);
  }
  async deletePhones(args: Prisma.PhonesDeleteArgs): Promise<PrismaPhones> {
    return this.prisma.phones.delete(args);
  }

  async findAccountsItems(
    parentId: string,
    args: Prisma.AccountsFindManyArgs
  ): Promise<PrismaAccounts[]> {
    return this.prisma.phones
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .accountsItems(args);
  }

  async findOrdersItems(
    parentId: string,
    args: Prisma.OrdersFindManyArgs
  ): Promise<PrismaOrders[]> {
    return this.prisma.phones
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ordersItems(args);
  }

  async getCrew(parentId: string): Promise<PrismaCrew | null> {
    return this.prisma.phones
      .findUnique({
        where: { id: parentId },
      })
      .crew();
  }
}
