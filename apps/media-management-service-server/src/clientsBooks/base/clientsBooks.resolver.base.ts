/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ClientsBooks } from "./ClientsBooks";
import { ClientsBooksCountArgs } from "./ClientsBooksCountArgs";
import { ClientsBooksFindManyArgs } from "./ClientsBooksFindManyArgs";
import { ClientsBooksFindUniqueArgs } from "./ClientsBooksFindUniqueArgs";
import { CreateClientsBooksArgs } from "./CreateClientsBooksArgs";
import { UpdateClientsBooksArgs } from "./UpdateClientsBooksArgs";
import { DeleteClientsBooksArgs } from "./DeleteClientsBooksArgs";
import { Books } from "../../books/base/Books";
import { Clients } from "../../clients/base/Clients";
import { ClientsBooksService } from "../clientsBooks.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ClientsBooks)
export class ClientsBooksResolverBase {
  constructor(
    protected readonly service: ClientsBooksService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ClientsBooks",
    action: "read",
    possession: "any",
  })
  async _clientsBooksItemsMeta(
    @graphql.Args() args: ClientsBooksCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ClientsBooks])
  @nestAccessControl.UseRoles({
    resource: "ClientsBooks",
    action: "read",
    possession: "any",
  })
  async clientsBooksItems(
    @graphql.Args() args: ClientsBooksFindManyArgs
  ): Promise<ClientsBooks[]> {
    return this.service.clientsBooksItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ClientsBooks, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ClientsBooks",
    action: "read",
    possession: "own",
  })
  async clientsBooks(
    @graphql.Args() args: ClientsBooksFindUniqueArgs
  ): Promise<ClientsBooks | null> {
    const result = await this.service.clientsBooks(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ClientsBooks)
  @nestAccessControl.UseRoles({
    resource: "ClientsBooks",
    action: "create",
    possession: "any",
  })
  async createClientsBooks(
    @graphql.Args() args: CreateClientsBooksArgs
  ): Promise<ClientsBooks> {
    return await this.service.createClientsBooks({
      ...args,
      data: {
        ...args.data,

        book: args.data.book
          ? {
              connect: args.data.book,
            }
          : undefined,

        client: args.data.client
          ? {
              connect: args.data.client,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ClientsBooks)
  @nestAccessControl.UseRoles({
    resource: "ClientsBooks",
    action: "update",
    possession: "any",
  })
  async updateClientsBooks(
    @graphql.Args() args: UpdateClientsBooksArgs
  ): Promise<ClientsBooks | null> {
    try {
      return await this.service.updateClientsBooks({
        ...args,
        data: {
          ...args.data,

          book: args.data.book
            ? {
                connect: args.data.book,
              }
            : undefined,

          client: args.data.client
            ? {
                connect: args.data.client,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ClientsBooks)
  @nestAccessControl.UseRoles({
    resource: "ClientsBooks",
    action: "delete",
    possession: "any",
  })
  async deleteClientsBooks(
    @graphql.Args() args: DeleteClientsBooksArgs
  ): Promise<ClientsBooks | null> {
    try {
      return await this.service.deleteClientsBooks(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Books, {
    nullable: true,
    name: "book",
  })
  @nestAccessControl.UseRoles({
    resource: "Books",
    action: "read",
    possession: "any",
  })
  async getBook(@graphql.Parent() parent: ClientsBooks): Promise<Books | null> {
    const result = await this.service.getBook(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Clients, {
    nullable: true,
    name: "client",
  })
  @nestAccessControl.UseRoles({
    resource: "Clients",
    action: "read",
    possession: "any",
  })
  async getClient(
    @graphql.Parent() parent: ClientsBooks
  ): Promise<Clients | null> {
    const result = await this.service.getClient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
