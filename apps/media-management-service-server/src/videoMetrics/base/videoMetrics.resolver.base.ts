/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { VideoMetrics } from "./VideoMetrics";
import { VideoMetricsCountArgs } from "./VideoMetricsCountArgs";
import { VideoMetricsFindManyArgs } from "./VideoMetricsFindManyArgs";
import { VideoMetricsFindUniqueArgs } from "./VideoMetricsFindUniqueArgs";
import { CreateVideoMetricsArgs } from "./CreateVideoMetricsArgs";
import { UpdateVideoMetricsArgs } from "./UpdateVideoMetricsArgs";
import { DeleteVideoMetricsArgs } from "./DeleteVideoMetricsArgs";
import { Orders } from "../../orders/base/Orders";
import { VideoMetricsService } from "../videoMetrics.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => VideoMetrics)
export class VideoMetricsResolverBase {
  constructor(
    protected readonly service: VideoMetricsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "VideoMetrics",
    action: "read",
    possession: "any",
  })
  async _videoMetricsItemsMeta(
    @graphql.Args() args: VideoMetricsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [VideoMetrics])
  @nestAccessControl.UseRoles({
    resource: "VideoMetrics",
    action: "read",
    possession: "any",
  })
  async videoMetricsItems(
    @graphql.Args() args: VideoMetricsFindManyArgs
  ): Promise<VideoMetrics[]> {
    return this.service.videoMetricsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => VideoMetrics, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "VideoMetrics",
    action: "read",
    possession: "own",
  })
  async videoMetrics(
    @graphql.Args() args: VideoMetricsFindUniqueArgs
  ): Promise<VideoMetrics | null> {
    const result = await this.service.videoMetrics(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VideoMetrics)
  @nestAccessControl.UseRoles({
    resource: "VideoMetrics",
    action: "create",
    possession: "any",
  })
  async createVideoMetrics(
    @graphql.Args() args: CreateVideoMetricsArgs
  ): Promise<VideoMetrics> {
    return await this.service.createVideoMetrics({
      ...args,
      data: {
        ...args.data,

        order: args.data.order
          ? {
              connect: args.data.order,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VideoMetrics)
  @nestAccessControl.UseRoles({
    resource: "VideoMetrics",
    action: "update",
    possession: "any",
  })
  async updateVideoMetrics(
    @graphql.Args() args: UpdateVideoMetricsArgs
  ): Promise<VideoMetrics | null> {
    try {
      return await this.service.updateVideoMetrics({
        ...args,
        data: {
          ...args.data,

          order: args.data.order
            ? {
                connect: args.data.order,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VideoMetrics)
  @nestAccessControl.UseRoles({
    resource: "VideoMetrics",
    action: "delete",
    possession: "any",
  })
  async deleteVideoMetrics(
    @graphql.Args() args: DeleteVideoMetricsArgs
  ): Promise<VideoMetrics | null> {
    try {
      return await this.service.deleteVideoMetrics(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Orders, {
    nullable: true,
    name: "order",
  })
  @nestAccessControl.UseRoles({
    resource: "Orders",
    action: "read",
    possession: "any",
  })
  async getOrder(
    @graphql.Parent() parent: VideoMetrics
  ): Promise<Orders | null> {
    const result = await this.service.getOrder(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
