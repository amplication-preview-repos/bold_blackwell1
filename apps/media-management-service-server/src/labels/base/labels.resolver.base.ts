/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Labels } from "./Labels";
import { LabelsCountArgs } from "./LabelsCountArgs";
import { LabelsFindManyArgs } from "./LabelsFindManyArgs";
import { LabelsFindUniqueArgs } from "./LabelsFindUniqueArgs";
import { CreateLabelsArgs } from "./CreateLabelsArgs";
import { UpdateLabelsArgs } from "./UpdateLabelsArgs";
import { DeleteLabelsArgs } from "./DeleteLabelsArgs";
import { SoundsLabelsFindManyArgs } from "../../soundsLabels/base/SoundsLabelsFindManyArgs";
import { SoundsLabels } from "../../soundsLabels/base/SoundsLabels";
import { TextsLabelsFindManyArgs } from "../../textsLabels/base/TextsLabelsFindManyArgs";
import { TextsLabels } from "../../textsLabels/base/TextsLabels";
import { LabelsService } from "../labels.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Labels)
export class LabelsResolverBase {
  constructor(
    protected readonly service: LabelsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Labels",
    action: "read",
    possession: "any",
  })
  async _labelsItemsMeta(
    @graphql.Args() args: LabelsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Labels])
  @nestAccessControl.UseRoles({
    resource: "Labels",
    action: "read",
    possession: "any",
  })
  async labelsItems(
    @graphql.Args() args: LabelsFindManyArgs
  ): Promise<Labels[]> {
    return this.service.labelsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Labels, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Labels",
    action: "read",
    possession: "own",
  })
  async labels(
    @graphql.Args() args: LabelsFindUniqueArgs
  ): Promise<Labels | null> {
    const result = await this.service.labels(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Labels)
  @nestAccessControl.UseRoles({
    resource: "Labels",
    action: "create",
    possession: "any",
  })
  async createLabels(@graphql.Args() args: CreateLabelsArgs): Promise<Labels> {
    return await this.service.createLabels({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Labels)
  @nestAccessControl.UseRoles({
    resource: "Labels",
    action: "update",
    possession: "any",
  })
  async updateLabels(
    @graphql.Args() args: UpdateLabelsArgs
  ): Promise<Labels | null> {
    try {
      return await this.service.updateLabels({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Labels)
  @nestAccessControl.UseRoles({
    resource: "Labels",
    action: "delete",
    possession: "any",
  })
  async deleteLabels(
    @graphql.Args() args: DeleteLabelsArgs
  ): Promise<Labels | null> {
    try {
      return await this.service.deleteLabels(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SoundsLabels], { name: "soundsLabelsItems" })
  @nestAccessControl.UseRoles({
    resource: "SoundsLabels",
    action: "read",
    possession: "any",
  })
  async findSoundsLabelsItems(
    @graphql.Parent() parent: Labels,
    @graphql.Args() args: SoundsLabelsFindManyArgs
  ): Promise<SoundsLabels[]> {
    const results = await this.service.findSoundsLabelsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [TextsLabels], { name: "textsLabelsItems" })
  @nestAccessControl.UseRoles({
    resource: "TextsLabels",
    action: "read",
    possession: "any",
  })
  async findTextsLabelsItems(
    @graphql.Parent() parent: Labels,
    @graphql.Args() args: TextsLabelsFindManyArgs
  ): Promise<TextsLabels[]> {
    const results = await this.service.findTextsLabelsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
