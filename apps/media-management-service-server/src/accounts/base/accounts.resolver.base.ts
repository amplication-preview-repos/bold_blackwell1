/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Accounts } from "./Accounts";
import { AccountsCountArgs } from "./AccountsCountArgs";
import { AccountsFindManyArgs } from "./AccountsFindManyArgs";
import { AccountsFindUniqueArgs } from "./AccountsFindUniqueArgs";
import { CreateAccountsArgs } from "./CreateAccountsArgs";
import { UpdateAccountsArgs } from "./UpdateAccountsArgs";
import { DeleteAccountsArgs } from "./DeleteAccountsArgs";
import { AccountsBooksFindManyArgs } from "../../accountsBooks/base/AccountsBooksFindManyArgs";
import { AccountsBooks } from "../../accountsBooks/base/AccountsBooks";
import { OrdersFindManyArgs } from "../../orders/base/OrdersFindManyArgs";
import { Orders } from "../../orders/base/Orders";
import { Phones } from "../../phones/base/Phones";
import { AccountsService } from "../accounts.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Accounts)
export class AccountsResolverBase {
  constructor(
    protected readonly service: AccountsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Accounts",
    action: "read",
    possession: "any",
  })
  async _accountsItemsMeta(
    @graphql.Args() args: AccountsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Accounts])
  @nestAccessControl.UseRoles({
    resource: "Accounts",
    action: "read",
    possession: "any",
  })
  async accountsItems(
    @graphql.Args() args: AccountsFindManyArgs
  ): Promise<Accounts[]> {
    return this.service.accountsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Accounts, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Accounts",
    action: "read",
    possession: "own",
  })
  async accounts(
    @graphql.Args() args: AccountsFindUniqueArgs
  ): Promise<Accounts | null> {
    const result = await this.service.accounts(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Accounts)
  @nestAccessControl.UseRoles({
    resource: "Accounts",
    action: "create",
    possession: "any",
  })
  async createAccounts(
    @graphql.Args() args: CreateAccountsArgs
  ): Promise<Accounts> {
    return await this.service.createAccounts({
      ...args,
      data: {
        ...args.data,

        phone: args.data.phone
          ? {
              connect: args.data.phone,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Accounts)
  @nestAccessControl.UseRoles({
    resource: "Accounts",
    action: "update",
    possession: "any",
  })
  async updateAccounts(
    @graphql.Args() args: UpdateAccountsArgs
  ): Promise<Accounts | null> {
    try {
      return await this.service.updateAccounts({
        ...args,
        data: {
          ...args.data,

          phone: args.data.phone
            ? {
                connect: args.data.phone,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Accounts)
  @nestAccessControl.UseRoles({
    resource: "Accounts",
    action: "delete",
    possession: "any",
  })
  async deleteAccounts(
    @graphql.Args() args: DeleteAccountsArgs
  ): Promise<Accounts | null> {
    try {
      return await this.service.deleteAccounts(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AccountsBooks], { name: "accountsBooksItems" })
  @nestAccessControl.UseRoles({
    resource: "AccountsBooks",
    action: "read",
    possession: "any",
  })
  async findAccountsBooksItems(
    @graphql.Parent() parent: Accounts,
    @graphql.Args() args: AccountsBooksFindManyArgs
  ): Promise<AccountsBooks[]> {
    const results = await this.service.findAccountsBooksItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Orders], { name: "ordersItems" })
  @nestAccessControl.UseRoles({
    resource: "Orders",
    action: "read",
    possession: "any",
  })
  async findOrdersItems(
    @graphql.Parent() parent: Accounts,
    @graphql.Args() args: OrdersFindManyArgs
  ): Promise<Orders[]> {
    const results = await this.service.findOrdersItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Phones, {
    nullable: true,
    name: "phone",
  })
  @nestAccessControl.UseRoles({
    resource: "Phones",
    action: "read",
    possession: "any",
  })
  async getPhone(@graphql.Parent() parent: Accounts): Promise<Phones | null> {
    const result = await this.service.getPhone(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
