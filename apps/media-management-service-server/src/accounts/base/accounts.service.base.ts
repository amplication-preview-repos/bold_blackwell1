/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Accounts as PrismaAccounts,
  AccountsBooks as PrismaAccountsBooks,
  Orders as PrismaOrders,
  Phones as PrismaPhones,
} from "@prisma/client";

export class AccountsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AccountsCountArgs, "select">): Promise<number> {
    return this.prisma.accounts.count(args);
  }

  async accountsItems(
    args: Prisma.AccountsFindManyArgs
  ): Promise<PrismaAccounts[]> {
    return this.prisma.accounts.findMany(args);
  }
  async accounts(
    args: Prisma.AccountsFindUniqueArgs
  ): Promise<PrismaAccounts | null> {
    return this.prisma.accounts.findUnique(args);
  }
  async createAccounts(
    args: Prisma.AccountsCreateArgs
  ): Promise<PrismaAccounts> {
    return this.prisma.accounts.create(args);
  }
  async updateAccounts(
    args: Prisma.AccountsUpdateArgs
  ): Promise<PrismaAccounts> {
    return this.prisma.accounts.update(args);
  }
  async deleteAccounts(
    args: Prisma.AccountsDeleteArgs
  ): Promise<PrismaAccounts> {
    return this.prisma.accounts.delete(args);
  }

  async findAccountsBooksItems(
    parentId: string,
    args: Prisma.AccountsBooksFindManyArgs
  ): Promise<PrismaAccountsBooks[]> {
    return this.prisma.accounts
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .accountsBooksItems(args);
  }

  async findOrdersItems(
    parentId: string,
    args: Prisma.OrdersFindManyArgs
  ): Promise<PrismaOrders[]> {
    return this.prisma.accounts
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ordersItems(args);
  }

  async getPhone(parentId: string): Promise<PrismaPhones | null> {
    return this.prisma.accounts
      .findUnique({
        where: { id: parentId },
      })
      .phone();
  }
}
