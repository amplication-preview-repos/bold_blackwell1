/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TextsHashtags } from "./TextsHashtags";
import { TextsHashtagsCountArgs } from "./TextsHashtagsCountArgs";
import { TextsHashtagsFindManyArgs } from "./TextsHashtagsFindManyArgs";
import { TextsHashtagsFindUniqueArgs } from "./TextsHashtagsFindUniqueArgs";
import { CreateTextsHashtagsArgs } from "./CreateTextsHashtagsArgs";
import { UpdateTextsHashtagsArgs } from "./UpdateTextsHashtagsArgs";
import { DeleteTextsHashtagsArgs } from "./DeleteTextsHashtagsArgs";
import { Hashtags } from "../../hashtags/base/Hashtags";
import { Texts } from "../../texts/base/Texts";
import { TextsHashtagsService } from "../textsHashtags.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TextsHashtags)
export class TextsHashtagsResolverBase {
  constructor(
    protected readonly service: TextsHashtagsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TextsHashtags",
    action: "read",
    possession: "any",
  })
  async _textsHashtagsItemsMeta(
    @graphql.Args() args: TextsHashtagsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TextsHashtags])
  @nestAccessControl.UseRoles({
    resource: "TextsHashtags",
    action: "read",
    possession: "any",
  })
  async textsHashtagsItems(
    @graphql.Args() args: TextsHashtagsFindManyArgs
  ): Promise<TextsHashtags[]> {
    return this.service.textsHashtagsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TextsHashtags, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TextsHashtags",
    action: "read",
    possession: "own",
  })
  async textsHashtags(
    @graphql.Args() args: TextsHashtagsFindUniqueArgs
  ): Promise<TextsHashtags | null> {
    const result = await this.service.textsHashtags(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TextsHashtags)
  @nestAccessControl.UseRoles({
    resource: "TextsHashtags",
    action: "create",
    possession: "any",
  })
  async createTextsHashtags(
    @graphql.Args() args: CreateTextsHashtagsArgs
  ): Promise<TextsHashtags> {
    return await this.service.createTextsHashtags({
      ...args,
      data: {
        ...args.data,

        hashtag: args.data.hashtag
          ? {
              connect: args.data.hashtag,
            }
          : undefined,

        text: args.data.text
          ? {
              connect: args.data.text,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TextsHashtags)
  @nestAccessControl.UseRoles({
    resource: "TextsHashtags",
    action: "update",
    possession: "any",
  })
  async updateTextsHashtags(
    @graphql.Args() args: UpdateTextsHashtagsArgs
  ): Promise<TextsHashtags | null> {
    try {
      return await this.service.updateTextsHashtags({
        ...args,
        data: {
          ...args.data,

          hashtag: args.data.hashtag
            ? {
                connect: args.data.hashtag,
              }
            : undefined,

          text: args.data.text
            ? {
                connect: args.data.text,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TextsHashtags)
  @nestAccessControl.UseRoles({
    resource: "TextsHashtags",
    action: "delete",
    possession: "any",
  })
  async deleteTextsHashtags(
    @graphql.Args() args: DeleteTextsHashtagsArgs
  ): Promise<TextsHashtags | null> {
    try {
      return await this.service.deleteTextsHashtags(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Hashtags, {
    nullable: true,
    name: "hashtag",
  })
  @nestAccessControl.UseRoles({
    resource: "Hashtags",
    action: "read",
    possession: "any",
  })
  async getHashtag(
    @graphql.Parent() parent: TextsHashtags
  ): Promise<Hashtags | null> {
    const result = await this.service.getHashtag(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Texts, {
    nullable: true,
    name: "text",
  })
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "read",
    possession: "any",
  })
  async getText(
    @graphql.Parent() parent: TextsHashtags
  ): Promise<Texts | null> {
    const result = await this.service.getText(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
