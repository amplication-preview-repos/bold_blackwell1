/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SoundsLabelsService } from "../soundsLabels.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SoundsLabelsCreateInput } from "./SoundsLabelsCreateInput";
import { SoundsLabels } from "./SoundsLabels";
import { SoundsLabelsFindManyArgs } from "./SoundsLabelsFindManyArgs";
import { SoundsLabelsWhereUniqueInput } from "./SoundsLabelsWhereUniqueInput";
import { SoundsLabelsUpdateInput } from "./SoundsLabelsUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SoundsLabelsControllerBase {
  constructor(
    protected readonly service: SoundsLabelsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SoundsLabels })
  @nestAccessControl.UseRoles({
    resource: "SoundsLabels",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSoundsLabels(
    @common.Body() data: SoundsLabelsCreateInput
  ): Promise<SoundsLabels> {
    return await this.service.createSoundsLabels({
      data: {
        ...data,

        label: data.label
          ? {
              connect: data.label,
            }
          : undefined,

        sound: data.sound
          ? {
              connect: data.sound,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        label: {
          select: {
            id: true,
          },
        },

        sound: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SoundsLabels] })
  @ApiNestedQuery(SoundsLabelsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SoundsLabels",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async soundsLabelsItems(
    @common.Req() request: Request
  ): Promise<SoundsLabels[]> {
    const args = plainToClass(SoundsLabelsFindManyArgs, request.query);
    return this.service.soundsLabelsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,

        label: {
          select: {
            id: true,
          },
        },

        sound: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SoundsLabels })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SoundsLabels",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async soundsLabels(
    @common.Param() params: SoundsLabelsWhereUniqueInput
  ): Promise<SoundsLabels | null> {
    const result = await this.service.soundsLabels({
      where: params,
      select: {
        createdAt: true,
        id: true,

        label: {
          select: {
            id: true,
          },
        },

        sound: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SoundsLabels })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SoundsLabels",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSoundsLabels(
    @common.Param() params: SoundsLabelsWhereUniqueInput,
    @common.Body() data: SoundsLabelsUpdateInput
  ): Promise<SoundsLabels | null> {
    try {
      return await this.service.updateSoundsLabels({
        where: params,
        data: {
          ...data,

          label: data.label
            ? {
                connect: data.label,
              }
            : undefined,

          sound: data.sound
            ? {
                connect: data.sound,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          label: {
            select: {
              id: true,
            },
          },

          sound: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SoundsLabels })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SoundsLabels",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSoundsLabels(
    @common.Param() params: SoundsLabelsWhereUniqueInput
  ): Promise<SoundsLabels | null> {
    try {
      return await this.service.deleteSoundsLabels({
        where: params,
        select: {
          createdAt: true,
          id: true,

          label: {
            select: {
              id: true,
            },
          },

          sound: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
