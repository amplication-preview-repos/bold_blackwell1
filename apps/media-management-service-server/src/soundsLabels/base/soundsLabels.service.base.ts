/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SoundsLabels as PrismaSoundsLabels,
  Labels as PrismaLabels,
  Sounds as PrismaSounds,
} from "@prisma/client";

export class SoundsLabelsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SoundsLabelsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.soundsLabels.count(args);
  }

  async soundsLabelsItems(
    args: Prisma.SoundsLabelsFindManyArgs
  ): Promise<PrismaSoundsLabels[]> {
    return this.prisma.soundsLabels.findMany(args);
  }
  async soundsLabels(
    args: Prisma.SoundsLabelsFindUniqueArgs
  ): Promise<PrismaSoundsLabels | null> {
    return this.prisma.soundsLabels.findUnique(args);
  }
  async createSoundsLabels(
    args: Prisma.SoundsLabelsCreateArgs
  ): Promise<PrismaSoundsLabels> {
    return this.prisma.soundsLabels.create(args);
  }
  async updateSoundsLabels(
    args: Prisma.SoundsLabelsUpdateArgs
  ): Promise<PrismaSoundsLabels> {
    return this.prisma.soundsLabels.update(args);
  }
  async deleteSoundsLabels(
    args: Prisma.SoundsLabelsDeleteArgs
  ): Promise<PrismaSoundsLabels> {
    return this.prisma.soundsLabels.delete(args);
  }

  async getLabel(parentId: string): Promise<PrismaLabels | null> {
    return this.prisma.soundsLabels
      .findUnique({
        where: { id: parentId },
      })
      .label();
  }

  async getSound(parentId: string): Promise<PrismaSounds | null> {
    return this.prisma.soundsLabels
      .findUnique({
        where: { id: parentId },
      })
      .sound();
  }
}
