/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SoundsLabels } from "./SoundsLabels";
import { SoundsLabelsCountArgs } from "./SoundsLabelsCountArgs";
import { SoundsLabelsFindManyArgs } from "./SoundsLabelsFindManyArgs";
import { SoundsLabelsFindUniqueArgs } from "./SoundsLabelsFindUniqueArgs";
import { CreateSoundsLabelsArgs } from "./CreateSoundsLabelsArgs";
import { UpdateSoundsLabelsArgs } from "./UpdateSoundsLabelsArgs";
import { DeleteSoundsLabelsArgs } from "./DeleteSoundsLabelsArgs";
import { Labels } from "../../labels/base/Labels";
import { Sounds } from "../../sounds/base/Sounds";
import { SoundsLabelsService } from "../soundsLabels.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SoundsLabels)
export class SoundsLabelsResolverBase {
  constructor(
    protected readonly service: SoundsLabelsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SoundsLabels",
    action: "read",
    possession: "any",
  })
  async _soundsLabelsItemsMeta(
    @graphql.Args() args: SoundsLabelsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SoundsLabels])
  @nestAccessControl.UseRoles({
    resource: "SoundsLabels",
    action: "read",
    possession: "any",
  })
  async soundsLabelsItems(
    @graphql.Args() args: SoundsLabelsFindManyArgs
  ): Promise<SoundsLabels[]> {
    return this.service.soundsLabelsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SoundsLabels, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SoundsLabels",
    action: "read",
    possession: "own",
  })
  async soundsLabels(
    @graphql.Args() args: SoundsLabelsFindUniqueArgs
  ): Promise<SoundsLabels | null> {
    const result = await this.service.soundsLabels(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SoundsLabels)
  @nestAccessControl.UseRoles({
    resource: "SoundsLabels",
    action: "create",
    possession: "any",
  })
  async createSoundsLabels(
    @graphql.Args() args: CreateSoundsLabelsArgs
  ): Promise<SoundsLabels> {
    return await this.service.createSoundsLabels({
      ...args,
      data: {
        ...args.data,

        label: args.data.label
          ? {
              connect: args.data.label,
            }
          : undefined,

        sound: args.data.sound
          ? {
              connect: args.data.sound,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SoundsLabels)
  @nestAccessControl.UseRoles({
    resource: "SoundsLabels",
    action: "update",
    possession: "any",
  })
  async updateSoundsLabels(
    @graphql.Args() args: UpdateSoundsLabelsArgs
  ): Promise<SoundsLabels | null> {
    try {
      return await this.service.updateSoundsLabels({
        ...args,
        data: {
          ...args.data,

          label: args.data.label
            ? {
                connect: args.data.label,
              }
            : undefined,

          sound: args.data.sound
            ? {
                connect: args.data.sound,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SoundsLabels)
  @nestAccessControl.UseRoles({
    resource: "SoundsLabels",
    action: "delete",
    possession: "any",
  })
  async deleteSoundsLabels(
    @graphql.Args() args: DeleteSoundsLabelsArgs
  ): Promise<SoundsLabels | null> {
    try {
      return await this.service.deleteSoundsLabels(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Labels, {
    nullable: true,
    name: "label",
  })
  @nestAccessControl.UseRoles({
    resource: "Labels",
    action: "read",
    possession: "any",
  })
  async getLabel(
    @graphql.Parent() parent: SoundsLabels
  ): Promise<Labels | null> {
    const result = await this.service.getLabel(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Sounds, {
    nullable: true,
    name: "sound",
  })
  @nestAccessControl.UseRoles({
    resource: "Sounds",
    action: "read",
    possession: "any",
  })
  async getSound(
    @graphql.Parent() parent: SoundsLabels
  ): Promise<Sounds | null> {
    const result = await this.service.getSound(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
