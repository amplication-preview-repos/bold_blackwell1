/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CaptionsService } from "../captions.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CaptionsCreateInput } from "./CaptionsCreateInput";
import { Captions } from "./Captions";
import { CaptionsFindManyArgs } from "./CaptionsFindManyArgs";
import { CaptionsWhereUniqueInput } from "./CaptionsWhereUniqueInput";
import { CaptionsUpdateInput } from "./CaptionsUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CaptionsControllerBase {
  constructor(
    protected readonly service: CaptionsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Captions })
  @nestAccessControl.UseRoles({
    resource: "Captions",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCaptions(
    @common.Body() data: CaptionsCreateInput
  ): Promise<Captions> {
    return await this.service.createCaptions({
      data: {
        ...data,

        text: data.text
          ? {
              connect: data.text,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        text: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Captions] })
  @ApiNestedQuery(CaptionsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Captions",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async captionsItems(@common.Req() request: Request): Promise<Captions[]> {
    const args = plainToClass(CaptionsFindManyArgs, request.query);
    return this.service.captionsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,

        text: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Captions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Captions",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async captions(
    @common.Param() params: CaptionsWhereUniqueInput
  ): Promise<Captions | null> {
    const result = await this.service.captions({
      where: params,
      select: {
        createdAt: true,
        id: true,

        text: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Captions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Captions",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCaptions(
    @common.Param() params: CaptionsWhereUniqueInput,
    @common.Body() data: CaptionsUpdateInput
  ): Promise<Captions | null> {
    try {
      return await this.service.updateCaptions({
        where: params,
        data: {
          ...data,

          text: data.text
            ? {
                connect: data.text,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          text: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Captions })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Captions",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCaptions(
    @common.Param() params: CaptionsWhereUniqueInput
  ): Promise<Captions | null> {
    try {
      return await this.service.deleteCaptions({
        where: params,
        select: {
          createdAt: true,
          id: true,

          text: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
