/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Captions as PrismaCaptions,
  Texts as PrismaTexts,
} from "@prisma/client";

export class CaptionsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CaptionsCountArgs, "select">): Promise<number> {
    return this.prisma.captions.count(args);
  }

  async captionsItems(
    args: Prisma.CaptionsFindManyArgs
  ): Promise<PrismaCaptions[]> {
    return this.prisma.captions.findMany(args);
  }
  async captions(
    args: Prisma.CaptionsFindUniqueArgs
  ): Promise<PrismaCaptions | null> {
    return this.prisma.captions.findUnique(args);
  }
  async createCaptions(
    args: Prisma.CaptionsCreateArgs
  ): Promise<PrismaCaptions> {
    return this.prisma.captions.create(args);
  }
  async updateCaptions(
    args: Prisma.CaptionsUpdateArgs
  ): Promise<PrismaCaptions> {
    return this.prisma.captions.update(args);
  }
  async deleteCaptions(
    args: Prisma.CaptionsDeleteArgs
  ): Promise<PrismaCaptions> {
    return this.prisma.captions.delete(args);
  }

  async getText(parentId: string): Promise<PrismaTexts | null> {
    return this.prisma.captions
      .findUnique({
        where: { id: parentId },
      })
      .text();
  }
}
