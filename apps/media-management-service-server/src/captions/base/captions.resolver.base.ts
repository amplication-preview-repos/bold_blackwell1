/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Captions } from "./Captions";
import { CaptionsCountArgs } from "./CaptionsCountArgs";
import { CaptionsFindManyArgs } from "./CaptionsFindManyArgs";
import { CaptionsFindUniqueArgs } from "./CaptionsFindUniqueArgs";
import { CreateCaptionsArgs } from "./CreateCaptionsArgs";
import { UpdateCaptionsArgs } from "./UpdateCaptionsArgs";
import { DeleteCaptionsArgs } from "./DeleteCaptionsArgs";
import { Texts } from "../../texts/base/Texts";
import { CaptionsService } from "../captions.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Captions)
export class CaptionsResolverBase {
  constructor(
    protected readonly service: CaptionsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Captions",
    action: "read",
    possession: "any",
  })
  async _captionsItemsMeta(
    @graphql.Args() args: CaptionsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Captions])
  @nestAccessControl.UseRoles({
    resource: "Captions",
    action: "read",
    possession: "any",
  })
  async captionsItems(
    @graphql.Args() args: CaptionsFindManyArgs
  ): Promise<Captions[]> {
    return this.service.captionsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Captions, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Captions",
    action: "read",
    possession: "own",
  })
  async captions(
    @graphql.Args() args: CaptionsFindUniqueArgs
  ): Promise<Captions | null> {
    const result = await this.service.captions(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Captions)
  @nestAccessControl.UseRoles({
    resource: "Captions",
    action: "create",
    possession: "any",
  })
  async createCaptions(
    @graphql.Args() args: CreateCaptionsArgs
  ): Promise<Captions> {
    return await this.service.createCaptions({
      ...args,
      data: {
        ...args.data,

        text: args.data.text
          ? {
              connect: args.data.text,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Captions)
  @nestAccessControl.UseRoles({
    resource: "Captions",
    action: "update",
    possession: "any",
  })
  async updateCaptions(
    @graphql.Args() args: UpdateCaptionsArgs
  ): Promise<Captions | null> {
    try {
      return await this.service.updateCaptions({
        ...args,
        data: {
          ...args.data,

          text: args.data.text
            ? {
                connect: args.data.text,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Captions)
  @nestAccessControl.UseRoles({
    resource: "Captions",
    action: "delete",
    possession: "any",
  })
  async deleteCaptions(
    @graphql.Args() args: DeleteCaptionsArgs
  ): Promise<Captions | null> {
    try {
      return await this.service.deleteCaptions(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Texts, {
    nullable: true,
    name: "text",
  })
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "read",
    possession: "any",
  })
  async getText(@graphql.Parent() parent: Captions): Promise<Texts | null> {
    const result = await this.service.getText(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
