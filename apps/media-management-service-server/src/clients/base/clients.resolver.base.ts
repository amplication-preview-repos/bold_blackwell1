/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Clients } from "./Clients";
import { ClientsCountArgs } from "./ClientsCountArgs";
import { ClientsFindManyArgs } from "./ClientsFindManyArgs";
import { ClientsFindUniqueArgs } from "./ClientsFindUniqueArgs";
import { CreateClientsArgs } from "./CreateClientsArgs";
import { UpdateClientsArgs } from "./UpdateClientsArgs";
import { DeleteClientsArgs } from "./DeleteClientsArgs";
import { ClientsBooksFindManyArgs } from "../../clientsBooks/base/ClientsBooksFindManyArgs";
import { ClientsBooks } from "../../clientsBooks/base/ClientsBooks";
import { ClientsService } from "../clients.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Clients)
export class ClientsResolverBase {
  constructor(
    protected readonly service: ClientsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Clients",
    action: "read",
    possession: "any",
  })
  async _clientsItemsMeta(
    @graphql.Args() args: ClientsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Clients])
  @nestAccessControl.UseRoles({
    resource: "Clients",
    action: "read",
    possession: "any",
  })
  async clientsItems(
    @graphql.Args() args: ClientsFindManyArgs
  ): Promise<Clients[]> {
    return this.service.clientsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Clients, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Clients",
    action: "read",
    possession: "own",
  })
  async clients(
    @graphql.Args() args: ClientsFindUniqueArgs
  ): Promise<Clients | null> {
    const result = await this.service.clients(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Clients)
  @nestAccessControl.UseRoles({
    resource: "Clients",
    action: "create",
    possession: "any",
  })
  async createClients(
    @graphql.Args() args: CreateClientsArgs
  ): Promise<Clients> {
    return await this.service.createClients({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Clients)
  @nestAccessControl.UseRoles({
    resource: "Clients",
    action: "update",
    possession: "any",
  })
  async updateClients(
    @graphql.Args() args: UpdateClientsArgs
  ): Promise<Clients | null> {
    try {
      return await this.service.updateClients({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Clients)
  @nestAccessControl.UseRoles({
    resource: "Clients",
    action: "delete",
    possession: "any",
  })
  async deleteClients(
    @graphql.Args() args: DeleteClientsArgs
  ): Promise<Clients | null> {
    try {
      return await this.service.deleteClients(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ClientsBooks], { name: "clientsBooksItems" })
  @nestAccessControl.UseRoles({
    resource: "ClientsBooks",
    action: "read",
    possession: "any",
  })
  async findClientsBooksItems(
    @graphql.Parent() parent: Clients,
    @graphql.Args() args: ClientsBooksFindManyArgs
  ): Promise<ClientsBooks[]> {
    const results = await this.service.findClientsBooksItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
