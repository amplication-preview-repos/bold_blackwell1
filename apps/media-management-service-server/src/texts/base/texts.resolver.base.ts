/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Texts } from "./Texts";
import { TextsCountArgs } from "./TextsCountArgs";
import { TextsFindManyArgs } from "./TextsFindManyArgs";
import { TextsFindUniqueArgs } from "./TextsFindUniqueArgs";
import { CreateTextsArgs } from "./CreateTextsArgs";
import { UpdateTextsArgs } from "./UpdateTextsArgs";
import { DeleteTextsArgs } from "./DeleteTextsArgs";
import { CaptionsFindManyArgs } from "../../captions/base/CaptionsFindManyArgs";
import { Captions } from "../../captions/base/Captions";
import { OrdersFindManyArgs } from "../../orders/base/OrdersFindManyArgs";
import { Orders } from "../../orders/base/Orders";
import { TextsHashtagsFindManyArgs } from "../../textsHashtags/base/TextsHashtagsFindManyArgs";
import { TextsHashtags } from "../../textsHashtags/base/TextsHashtags";
import { TextsLabelsFindManyArgs } from "../../textsLabels/base/TextsLabelsFindManyArgs";
import { TextsLabels } from "../../textsLabels/base/TextsLabels";
import { Books } from "../../books/base/Books";
import { TextsService } from "../texts.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Texts)
export class TextsResolverBase {
  constructor(
    protected readonly service: TextsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "read",
    possession: "any",
  })
  async _textsItemsMeta(
    @graphql.Args() args: TextsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Texts])
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "read",
    possession: "any",
  })
  async textsItems(@graphql.Args() args: TextsFindManyArgs): Promise<Texts[]> {
    return this.service.textsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Texts, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "read",
    possession: "own",
  })
  async texts(
    @graphql.Args() args: TextsFindUniqueArgs
  ): Promise<Texts | null> {
    const result = await this.service.texts(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Texts)
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "create",
    possession: "any",
  })
  async createTexts(@graphql.Args() args: CreateTextsArgs): Promise<Texts> {
    return await this.service.createTexts({
      ...args,
      data: {
        ...args.data,

        book: args.data.book
          ? {
              connect: args.data.book,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Texts)
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "update",
    possession: "any",
  })
  async updateTexts(
    @graphql.Args() args: UpdateTextsArgs
  ): Promise<Texts | null> {
    try {
      return await this.service.updateTexts({
        ...args,
        data: {
          ...args.data,

          book: args.data.book
            ? {
                connect: args.data.book,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Texts)
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "delete",
    possession: "any",
  })
  async deleteTexts(
    @graphql.Args() args: DeleteTextsArgs
  ): Promise<Texts | null> {
    try {
      return await this.service.deleteTexts(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Captions], { name: "captionsItems" })
  @nestAccessControl.UseRoles({
    resource: "Captions",
    action: "read",
    possession: "any",
  })
  async findCaptionsItems(
    @graphql.Parent() parent: Texts,
    @graphql.Args() args: CaptionsFindManyArgs
  ): Promise<Captions[]> {
    const results = await this.service.findCaptionsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Orders], { name: "ordersItems" })
  @nestAccessControl.UseRoles({
    resource: "Orders",
    action: "read",
    possession: "any",
  })
  async findOrdersItems(
    @graphql.Parent() parent: Texts,
    @graphql.Args() args: OrdersFindManyArgs
  ): Promise<Orders[]> {
    const results = await this.service.findOrdersItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [TextsHashtags], { name: "textsHashtagsItems" })
  @nestAccessControl.UseRoles({
    resource: "TextsHashtags",
    action: "read",
    possession: "any",
  })
  async findTextsHashtagsItems(
    @graphql.Parent() parent: Texts,
    @graphql.Args() args: TextsHashtagsFindManyArgs
  ): Promise<TextsHashtags[]> {
    const results = await this.service.findTextsHashtagsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [TextsLabels], { name: "textsLabelsItems" })
  @nestAccessControl.UseRoles({
    resource: "TextsLabels",
    action: "read",
    possession: "any",
  })
  async findTextsLabelsItems(
    @graphql.Parent() parent: Texts,
    @graphql.Args() args: TextsLabelsFindManyArgs
  ): Promise<TextsLabels[]> {
    const results = await this.service.findTextsLabelsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Books, {
    nullable: true,
    name: "book",
  })
  @nestAccessControl.UseRoles({
    resource: "Books",
    action: "read",
    possession: "any",
  })
  async getBook(@graphql.Parent() parent: Texts): Promise<Books | null> {
    const result = await this.service.getBook(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
