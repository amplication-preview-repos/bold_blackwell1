/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Texts as PrismaTexts,
  Captions as PrismaCaptions,
  Orders as PrismaOrders,
  TextsHashtags as PrismaTextsHashtags,
  TextsLabels as PrismaTextsLabels,
  Books as PrismaBooks,
} from "@prisma/client";

export class TextsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TextsCountArgs, "select">): Promise<number> {
    return this.prisma.texts.count(args);
  }

  async textsItems(args: Prisma.TextsFindManyArgs): Promise<PrismaTexts[]> {
    return this.prisma.texts.findMany(args);
  }
  async texts(args: Prisma.TextsFindUniqueArgs): Promise<PrismaTexts | null> {
    return this.prisma.texts.findUnique(args);
  }
  async createTexts(args: Prisma.TextsCreateArgs): Promise<PrismaTexts> {
    return this.prisma.texts.create(args);
  }
  async updateTexts(args: Prisma.TextsUpdateArgs): Promise<PrismaTexts> {
    return this.prisma.texts.update(args);
  }
  async deleteTexts(args: Prisma.TextsDeleteArgs): Promise<PrismaTexts> {
    return this.prisma.texts.delete(args);
  }

  async findCaptionsItems(
    parentId: string,
    args: Prisma.CaptionsFindManyArgs
  ): Promise<PrismaCaptions[]> {
    return this.prisma.texts
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .captionsItems(args);
  }

  async findOrdersItems(
    parentId: string,
    args: Prisma.OrdersFindManyArgs
  ): Promise<PrismaOrders[]> {
    return this.prisma.texts
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ordersItems(args);
  }

  async findTextsHashtagsItems(
    parentId: string,
    args: Prisma.TextsHashtagsFindManyArgs
  ): Promise<PrismaTextsHashtags[]> {
    return this.prisma.texts
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .textsHashtagsItems(args);
  }

  async findTextsLabelsItems(
    parentId: string,
    args: Prisma.TextsLabelsFindManyArgs
  ): Promise<PrismaTextsLabels[]> {
    return this.prisma.texts
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .textsLabelsItems(args);
  }

  async getBook(parentId: string): Promise<PrismaBooks | null> {
    return this.prisma.texts
      .findUnique({
        where: { id: parentId },
      })
      .book();
  }
}
