/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TextsService } from "../texts.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TextsCreateInput } from "./TextsCreateInput";
import { Texts } from "./Texts";
import { TextsFindManyArgs } from "./TextsFindManyArgs";
import { TextsWhereUniqueInput } from "./TextsWhereUniqueInput";
import { TextsUpdateInput } from "./TextsUpdateInput";
import { CaptionsFindManyArgs } from "../../captions/base/CaptionsFindManyArgs";
import { Captions } from "../../captions/base/Captions";
import { CaptionsWhereUniqueInput } from "../../captions/base/CaptionsWhereUniqueInput";
import { OrdersFindManyArgs } from "../../orders/base/OrdersFindManyArgs";
import { Orders } from "../../orders/base/Orders";
import { OrdersWhereUniqueInput } from "../../orders/base/OrdersWhereUniqueInput";
import { TextsHashtagsFindManyArgs } from "../../textsHashtags/base/TextsHashtagsFindManyArgs";
import { TextsHashtags } from "../../textsHashtags/base/TextsHashtags";
import { TextsHashtagsWhereUniqueInput } from "../../textsHashtags/base/TextsHashtagsWhereUniqueInput";
import { TextsLabelsFindManyArgs } from "../../textsLabels/base/TextsLabelsFindManyArgs";
import { TextsLabels } from "../../textsLabels/base/TextsLabels";
import { TextsLabelsWhereUniqueInput } from "../../textsLabels/base/TextsLabelsWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TextsControllerBase {
  constructor(
    protected readonly service: TextsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Texts })
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTexts(@common.Body() data: TextsCreateInput): Promise<Texts> {
    return await this.service.createTexts({
      data: {
        ...data,

        book: data.book
          ? {
              connect: data.book,
            }
          : undefined,
      },
      select: {
        book: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Texts] })
  @ApiNestedQuery(TextsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async textsItems(@common.Req() request: Request): Promise<Texts[]> {
    const args = plainToClass(TextsFindManyArgs, request.query);
    return this.service.textsItems({
      ...args,
      select: {
        book: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Texts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async texts(
    @common.Param() params: TextsWhereUniqueInput
  ): Promise<Texts | null> {
    const result = await this.service.texts({
      where: params,
      select: {
        book: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Texts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTexts(
    @common.Param() params: TextsWhereUniqueInput,
    @common.Body() data: TextsUpdateInput
  ): Promise<Texts | null> {
    try {
      return await this.service.updateTexts({
        where: params,
        data: {
          ...data,

          book: data.book
            ? {
                connect: data.book,
              }
            : undefined,
        },
        select: {
          book: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Texts })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTexts(
    @common.Param() params: TextsWhereUniqueInput
  ): Promise<Texts | null> {
    try {
      return await this.service.deleteTexts({
        where: params,
        select: {
          book: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/captionsItems")
  @ApiNestedQuery(CaptionsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Captions",
    action: "read",
    possession: "any",
  })
  async findCaptionsItems(
    @common.Req() request: Request,
    @common.Param() params: TextsWhereUniqueInput
  ): Promise<Captions[]> {
    const query = plainToClass(CaptionsFindManyArgs, request.query);
    const results = await this.service.findCaptionsItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        text: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/captionsItems")
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "update",
    possession: "any",
  })
  async connectCaptionsItems(
    @common.Param() params: TextsWhereUniqueInput,
    @common.Body() body: CaptionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      captionsItems: {
        connect: body,
      },
    };
    await this.service.updateTexts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/captionsItems")
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "update",
    possession: "any",
  })
  async updateCaptionsItems(
    @common.Param() params: TextsWhereUniqueInput,
    @common.Body() body: CaptionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      captionsItems: {
        set: body,
      },
    };
    await this.service.updateTexts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/captionsItems")
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "update",
    possession: "any",
  })
  async disconnectCaptionsItems(
    @common.Param() params: TextsWhereUniqueInput,
    @common.Body() body: CaptionsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      captionsItems: {
        disconnect: body,
      },
    };
    await this.service.updateTexts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/ordersItems")
  @ApiNestedQuery(OrdersFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Orders",
    action: "read",
    possession: "any",
  })
  async findOrdersItems(
    @common.Req() request: Request,
    @common.Param() params: TextsWhereUniqueInput
  ): Promise<Orders[]> {
    const query = plainToClass(OrdersFindManyArgs, request.query);
    const results = await this.service.findOrdersItems(params.id, {
      ...query,
      select: {
        account: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,

        phone: {
          select: {
            id: true,
          },
        },

        text: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ordersItems")
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "update",
    possession: "any",
  })
  async connectOrdersItems(
    @common.Param() params: TextsWhereUniqueInput,
    @common.Body() body: OrdersWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersItems: {
        connect: body,
      },
    };
    await this.service.updateTexts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ordersItems")
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "update",
    possession: "any",
  })
  async updateOrdersItems(
    @common.Param() params: TextsWhereUniqueInput,
    @common.Body() body: OrdersWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersItems: {
        set: body,
      },
    };
    await this.service.updateTexts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ordersItems")
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "update",
    possession: "any",
  })
  async disconnectOrdersItems(
    @common.Param() params: TextsWhereUniqueInput,
    @common.Body() body: OrdersWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ordersItems: {
        disconnect: body,
      },
    };
    await this.service.updateTexts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/textsHashtagsItems")
  @ApiNestedQuery(TextsHashtagsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TextsHashtags",
    action: "read",
    possession: "any",
  })
  async findTextsHashtagsItems(
    @common.Req() request: Request,
    @common.Param() params: TextsWhereUniqueInput
  ): Promise<TextsHashtags[]> {
    const query = plainToClass(TextsHashtagsFindManyArgs, request.query);
    const results = await this.service.findTextsHashtagsItems(params.id, {
      ...query,
      select: {
        createdAt: true,

        hashtag: {
          select: {
            id: true,
          },
        },

        id: true,

        text: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/textsHashtagsItems")
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "update",
    possession: "any",
  })
  async connectTextsHashtagsItems(
    @common.Param() params: TextsWhereUniqueInput,
    @common.Body() body: TextsHashtagsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      textsHashtagsItems: {
        connect: body,
      },
    };
    await this.service.updateTexts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/textsHashtagsItems")
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "update",
    possession: "any",
  })
  async updateTextsHashtagsItems(
    @common.Param() params: TextsWhereUniqueInput,
    @common.Body() body: TextsHashtagsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      textsHashtagsItems: {
        set: body,
      },
    };
    await this.service.updateTexts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/textsHashtagsItems")
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "update",
    possession: "any",
  })
  async disconnectTextsHashtagsItems(
    @common.Param() params: TextsWhereUniqueInput,
    @common.Body() body: TextsHashtagsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      textsHashtagsItems: {
        disconnect: body,
      },
    };
    await this.service.updateTexts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/textsLabelsItems")
  @ApiNestedQuery(TextsLabelsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TextsLabels",
    action: "read",
    possession: "any",
  })
  async findTextsLabelsItems(
    @common.Req() request: Request,
    @common.Param() params: TextsWhereUniqueInput
  ): Promise<TextsLabels[]> {
    const query = plainToClass(TextsLabelsFindManyArgs, request.query);
    const results = await this.service.findTextsLabelsItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        label: {
          select: {
            id: true,
          },
        },

        text: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/textsLabelsItems")
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "update",
    possession: "any",
  })
  async connectTextsLabelsItems(
    @common.Param() params: TextsWhereUniqueInput,
    @common.Body() body: TextsLabelsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      textsLabelsItems: {
        connect: body,
      },
    };
    await this.service.updateTexts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/textsLabelsItems")
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "update",
    possession: "any",
  })
  async updateTextsLabelsItems(
    @common.Param() params: TextsWhereUniqueInput,
    @common.Body() body: TextsLabelsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      textsLabelsItems: {
        set: body,
      },
    };
    await this.service.updateTexts({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/textsLabelsItems")
  @nestAccessControl.UseRoles({
    resource: "Texts",
    action: "update",
    possession: "any",
  })
  async disconnectTextsLabelsItems(
    @common.Param() params: TextsWhereUniqueInput,
    @common.Body() body: TextsLabelsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      textsLabelsItems: {
        disconnect: body,
      },
    };
    await this.service.updateTexts({
      where: params,
      data,
      select: { id: true },
    });
  }
}
